// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messageall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_ParamType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_ParamType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ACPowerCharger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACPowerCharger_BasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_BasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACPowerCharger_RealtimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_RealtimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACPowerCharger_ServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_ServiceInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACPowerCharger_DeviceWorkState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACPowerCharger_PowerChargerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommonBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonBasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceStateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectivityState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectivityState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargingConnector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargingConnector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalConfigurationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalConfigurationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteConfigurationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteConfigurationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteControlParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteControlParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteOperationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteOperationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteConfigurationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteConfigurationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteControlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteControlResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteUpgradeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteUpgradeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceStateReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetworkOperator_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetworkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChargingConnectorWorkState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChargingConnectorConnectionState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChargingConnectorFaultState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PowerChargerConnectorOutputType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PowerChargerConnectorOutputVoltage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceFinishResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlarmState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalConfigurationInfoAccessType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RemoteControlCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RemoteConfigurationResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RemoteControlResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messageall_2eproto() {
  protobuf_AddDesc_messageall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messageall.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, publish_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, params_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_ParamType_descriptor_ = Message_descriptor_->nested_type(0);
  static const int Message_ParamType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_ParamType, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_ParamType, value_),
  };
  Message_ParamType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_ParamType_descriptor_,
      Message_ParamType::default_instance_,
      Message_ParamType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_ParamType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_ParamType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_ParamType));
  Message_MessageType_descriptor_ = Message_descriptor_->enum_type(0);
  ACPowerCharger_descriptor_ = file->message_type(1);
  static const int ACPowerCharger_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, message_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, basicinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, realtime_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, alarms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, service_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, local_configuration_),
  };
  ACPowerCharger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_descriptor_,
      ACPowerCharger::default_instance_,
      ACPowerCharger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger));
  ACPowerCharger_BasicInfo_descriptor_ = ACPowerCharger_descriptor_->nested_type(0);
  static const int ACPowerCharger_BasicInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, common_basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, power_charger_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, charging_connector_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, power_),
  };
  ACPowerCharger_BasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_BasicInfo_descriptor_,
      ACPowerCharger_BasicInfo::default_instance_,
      ACPowerCharger_BasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger_BasicInfo));
  ACPowerCharger_RealtimeInfo_descriptor_ = ACPowerCharger_descriptor_->nested_type(1);
  static const int ACPowerCharger_RealtimeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, connectivity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, device_work_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, charging_connector_),
  };
  ACPowerCharger_RealtimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_RealtimeInfo_descriptor_,
      ACPowerCharger_RealtimeInfo::default_instance_,
      ACPowerCharger_RealtimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger_RealtimeInfo));
  ACPowerCharger_ServiceInfo_descriptor_ = ACPowerCharger_descriptor_->nested_type(2);
  static const int ACPowerCharger_ServiceInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, service_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charging_event_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charging_connector_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, realtime_charged_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, service_finish_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charged_energy_total_),
  };
  ACPowerCharger_ServiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_ServiceInfo_descriptor_,
      ACPowerCharger_ServiceInfo::default_instance_,
      ACPowerCharger_ServiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger_ServiceInfo));
  ACPowerCharger_DeviceWorkState_descriptor_ = ACPowerCharger_descriptor_->enum_type(0);
  ACPowerCharger_PowerChargerType_descriptor_ = ACPowerCharger_descriptor_->enum_type(1);
  CommonBasicInfo_descriptor_ = file->message_type(2);
  static const int CommonBasicInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBasicInfo, software_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBasicInfo, hardware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBasicInfo, service_state_info_),
  };
  CommonBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonBasicInfo_descriptor_,
      CommonBasicInfo::default_instance_,
      CommonBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonBasicInfo));
  ServiceStateInfo_descriptor_ = file->message_type(3);
  static const int ServiceStateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStateInfo, service_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStateInfo, service_state_reason_),
  };
  ServiceStateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceStateInfo_descriptor_,
      ServiceStateInfo::default_instance_,
      ServiceStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceStateInfo));
  ConnectivityState_descriptor_ = file->message_type(4);
  static const int ConnectivityState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectivityState, network_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectivityState, network_type_),
  };
  ConnectivityState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectivityState_descriptor_,
      ConnectivityState::default_instance_,
      ConnectivityState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectivityState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectivityState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectivityState));
  ChargingConnector_descriptor_ = file->message_type(5);
  static const int ChargingConnector_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, charging_connector_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, charging_connector_work_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, charging_connector_connection_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, charging_connector_fault_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, power_charger_connector_output_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, power_charger_connector_rated_output_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, power_charger_connector_rated_output_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, realtime_output_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, realtime_output_current_),
  };
  ChargingConnector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargingConnector_descriptor_,
      ChargingConnector::default_instance_,
      ChargingConnector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingConnector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargingConnector));
  Alarm_descriptor_ = file->message_type(6);
  static const int Alarm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, alarm_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, alarm_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, alarm_state_),
  };
  Alarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alarm_descriptor_,
      Alarm::default_instance_,
      Alarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alarm));
  LocalConfiguration_descriptor_ = file->message_type(7);
  static const int LocalConfiguration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfiguration, full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfiguration, configuration_info_),
  };
  LocalConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalConfiguration_descriptor_,
      LocalConfiguration::default_instance_,
      LocalConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalConfiguration));
  LocalConfigurationInfo_descriptor_ = file->message_type(8);
  static const int LocalConfigurationInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfigurationInfo, configuration_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfigurationInfo, configuration_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfigurationInfo, local_configuration_info_access_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfigurationInfo, has_been_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfigurationInfo, failurereason_),
  };
  LocalConfigurationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalConfigurationInfo_descriptor_,
      LocalConfigurationInfo::default_instance_,
      LocalConfigurationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfigurationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalConfigurationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalConfigurationInfo));
  RemoteOperation_descriptor_ = file->message_type(9);
  static const int RemoteOperation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperation, message_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperation, remote_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperation, remote_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperation, remote_upgrade_),
  };
  RemoteOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteOperation_descriptor_,
      RemoteOperation::default_instance_,
      RemoteOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteOperation));
  RemoteConfiguration_descriptor_ = file->message_type(10);
  static const int RemoteConfiguration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfiguration, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfiguration, remote_configuration_info_),
  };
  RemoteConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteConfiguration_descriptor_,
      RemoteConfiguration::default_instance_,
      RemoteConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteConfiguration));
  RemoteConfigurationInfo_descriptor_ = file->message_type(11);
  static const int RemoteConfigurationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationInfo, configuration_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationInfo, configuration_value_),
  };
  RemoteConfigurationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteConfigurationInfo_descriptor_,
      RemoteConfigurationInfo::default_instance_,
      RemoteConfigurationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteConfigurationInfo));
  RemoteControl_descriptor_ = file->message_type(12);
  static const int RemoteControl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, remote_control_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, remote_control_param_),
  };
  RemoteControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteControl_descriptor_,
      RemoteControl::default_instance_,
      RemoteControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteControl));
  RemoteControlParam_descriptor_ = file->message_type(13);
  static const int RemoteControlParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlParam, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlParam, value_),
  };
  RemoteControlParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteControlParam_descriptor_,
      RemoteControlParam::default_instance_,
      RemoteControlParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteControlParam));
  RemoteUpgrade_descriptor_ = file->message_type(14);
  static const int RemoteUpgrade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgrade, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgrade, software_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgrade, ftp_address_),
  };
  RemoteUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteUpgrade_descriptor_,
      RemoteUpgrade::default_instance_,
      RemoteUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteUpgrade));
  RemoteOperationResponse_descriptor_ = file->message_type(15);
  static const int RemoteOperationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperationResponse, remote_configuration_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperationResponse, remote_control_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperationResponse, remote_upgrade_response_),
  };
  RemoteOperationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteOperationResponse_descriptor_,
      RemoteOperationResponse::default_instance_,
      RemoteOperationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteOperationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteOperationResponse));
  RemoteConfigurationResponse_descriptor_ = file->message_type(16);
  static const int RemoteConfigurationResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationResponse, remote_configuration_response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationResponse, failurereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationResponse, configuration_info_),
  };
  RemoteConfigurationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteConfigurationResponse_descriptor_,
      RemoteConfigurationResponse::default_instance_,
      RemoteConfigurationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteConfigurationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteConfigurationResponse));
  RemoteControlResponse_descriptor_ = file->message_type(17);
  static const int RemoteControlResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResponse, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResponse, remote_control_response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResponse, failurereason_),
  };
  RemoteControlResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteControlResponse_descriptor_,
      RemoteControlResponse::default_instance_,
      RemoteControlResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteControlResponse));
  RemoteUpgradeResponse_descriptor_ = file->message_type(18);
  static const int RemoteUpgradeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgradeResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgradeResponse, device_id_),
  };
  RemoteUpgradeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteUpgradeResponse_descriptor_,
      RemoteUpgradeResponse::default_instance_,
      RemoteUpgradeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgradeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteUpgradeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteUpgradeResponse));
  ServiceState_descriptor_ = file->enum_type(0);
  ServiceStateReason_descriptor_ = file->enum_type(1);
  NetworkOperator_descriptor_ = file->enum_type(2);
  NetworkType_descriptor_ = file->enum_type(3);
  ChargingConnectorWorkState_descriptor_ = file->enum_type(4);
  ChargingConnectorConnectionState_descriptor_ = file->enum_type(5);
  ChargingConnectorFaultState_descriptor_ = file->enum_type(6);
  PowerChargerConnectorOutputType_descriptor_ = file->enum_type(7);
  PowerChargerConnectorOutputVoltage_descriptor_ = file->enum_type(8);
  ServiceEvent_descriptor_ = file->enum_type(9);
  ServiceFinishResult_descriptor_ = file->enum_type(10);
  AlarmState_descriptor_ = file->enum_type(11);
  LocalConfigurationInfoAccessType_descriptor_ = file->enum_type(12);
  RemoteControlCommand_descriptor_ = file->enum_type(13);
  RemoteConfigurationResponseType_descriptor_ = file->enum_type(14);
  RemoteControlResponseType_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messageall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_ParamType_descriptor_, &Message_ParamType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_descriptor_, &ACPowerCharger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_BasicInfo_descriptor_, &ACPowerCharger_BasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_RealtimeInfo_descriptor_, &ACPowerCharger_RealtimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_ServiceInfo_descriptor_, &ACPowerCharger_ServiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonBasicInfo_descriptor_, &CommonBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceStateInfo_descriptor_, &ServiceStateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectivityState_descriptor_, &ConnectivityState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargingConnector_descriptor_, &ChargingConnector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alarm_descriptor_, &Alarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalConfiguration_descriptor_, &LocalConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalConfigurationInfo_descriptor_, &LocalConfigurationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteOperation_descriptor_, &RemoteOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteConfiguration_descriptor_, &RemoteConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteConfigurationInfo_descriptor_, &RemoteConfigurationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteControl_descriptor_, &RemoteControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteControlParam_descriptor_, &RemoteControlParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteUpgrade_descriptor_, &RemoteUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteOperationResponse_descriptor_, &RemoteOperationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteConfigurationResponse_descriptor_, &RemoteConfigurationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteControlResponse_descriptor_, &RemoteControlResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteUpgradeResponse_descriptor_, &RemoteUpgradeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messageall_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Message_ParamType::default_instance_;
  delete Message_ParamType_reflection_;
  delete ACPowerCharger::default_instance_;
  delete ACPowerCharger_reflection_;
  delete ACPowerCharger_BasicInfo::default_instance_;
  delete ACPowerCharger_BasicInfo_reflection_;
  delete ACPowerCharger_RealtimeInfo::default_instance_;
  delete ACPowerCharger_RealtimeInfo_reflection_;
  delete ACPowerCharger_ServiceInfo::default_instance_;
  delete ACPowerCharger_ServiceInfo_reflection_;
  delete CommonBasicInfo::default_instance_;
  delete CommonBasicInfo_reflection_;
  delete ServiceStateInfo::default_instance_;
  delete ServiceStateInfo_reflection_;
  delete ConnectivityState::default_instance_;
  delete ConnectivityState_reflection_;
  delete ChargingConnector::default_instance_;
  delete ChargingConnector_reflection_;
  delete Alarm::default_instance_;
  delete Alarm_reflection_;
  delete LocalConfiguration::default_instance_;
  delete LocalConfiguration_reflection_;
  delete LocalConfigurationInfo::default_instance_;
  delete LocalConfigurationInfo_reflection_;
  delete RemoteOperation::default_instance_;
  delete RemoteOperation_reflection_;
  delete RemoteConfiguration::default_instance_;
  delete RemoteConfiguration_reflection_;
  delete RemoteConfigurationInfo::default_instance_;
  delete RemoteConfigurationInfo_reflection_;
  delete RemoteControl::default_instance_;
  delete RemoteControl_reflection_;
  delete RemoteControlParam::default_instance_;
  delete RemoteControlParam_reflection_;
  delete RemoteUpgrade::default_instance_;
  delete RemoteUpgrade_reflection_;
  delete RemoteOperationResponse::default_instance_;
  delete RemoteOperationResponse_reflection_;
  delete RemoteConfigurationResponse::default_instance_;
  delete RemoteConfigurationResponse_reflection_;
  delete RemoteControlResponse::default_instance_;
  delete RemoteControlResponse_reflection_;
  delete RemoteUpgradeResponse::default_instance_;
  delete RemoteUpgradeResponse_reflection_;
}

void protobuf_AddDesc_messageall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020messageall.proto\"\270\002\n\007Message\022\017\n\007versio"
    "n\030\001 \001(\005\022\n\n\002id\030\002 \001(\t\022\022\n\npublish_ts\030\003 \001(\003\022"
    "\013\n\003ttl\030\004 \001(\003\022\"\n\004type\030\005 \001(\0162\024.Message.Mes"
    "sageType\022\020\n\010sub_type\030\006 \001(\t\022\"\n\006params\030\007 \003"
    "(\0132\022.Message.ParamType\032\'\n\tParamType\022\013\n\003k"
    "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"l\n\013MessageType\022\020"
    "\n\014NOTIFICATION\020\000\022\023\n\017CONTROL_COMMAND\020\001\022\022\n"
    "\016COMMAND_RESULT\020\002\022\017\n\013DATA_REPORT\020\003\022\021\n\rCL"
    "IENT_STATUS\020\004\"\233\010\n\016ACPowerCharger\022\021\n\tdevi"
    "ce_id\030\001 \001(\t\022\031\n\021message_timestamp\030\002 \001(\003\022,"
    "\n\tbasicInfo\030\003 \001(\0132\031.ACPowerCharger.Basic"
    "Info\0223\n\rrealtime_info\030\004 \001(\0132\034.ACPowerCha"
    "rger.RealtimeInfo\022\026\n\006alarms\030\005 \003(\0132\006.Alar"
    "m\0221\n\014service_info\030\006 \003(\0132\033.ACPowerCharger"
    ".ServiceInfo\0220\n\023local_configuration\030\007 \001("
    "\0132\023.LocalConfiguration\032\252\001\n\tBasicInfo\022+\n\021"
    "common_basic_info\030\001 \001(\0132\020.CommonBasicInf"
    "o\022<\n\022power_charger_type\030\002 \001(\0162 .ACPowerC"
    "harger.PowerChargerType\022#\n\033charging_conn"
    "ector_quantity\030\003 \001(\005\022\r\n\005power\030\004 \001(\002\032\252\001\n\014"
    "RealtimeInfo\022.\n\022connectivity_state\030\001 \001(\013"
    "2\022.ConnectivityState\022:\n\021device_work_stat"
    "e\030\002 \001(\0162\037.ACPowerCharger.DeviceWorkState"
    "\022.\n\022charging_connector\030\004 \003(\0132\022.ChargingC"
    "onnector\032\374\001\n\013ServiceInfo\022\022\n\nservice_id\030\001"
    " \001(\t\022$\n\rservice_event\030\002 \001(\0162\r.ServiceEve"
    "nt\022 \n\030charging_event_timestamp\030\003 \001(\003\022\035\n\025"
    "charging_connector_id\030\004 \001(\t\022\037\n\027realtime_"
    "charged_energy\030\005 \001(\002\0223\n\025service_finish_r"
    "esult\030\006 \001(\0162\024.ServiceFinishResult\022\034\n\024cha"
    "rged_energy_total\030\007 \001(\002\"4\n\017DeviceWorkSta"
    "te\022\014\n\010DWS_FREE\020\000\022\023\n\017DWS_IN_CHARGING\020\001\"l\n"
    "\020PowerChargerType\022\017\n\013PCT_AC_ONLY\020\000\022\017\n\013PC"
    "T_DC_ONLY\020\001\022\024\n\020PCT_AC_DC_HYBRID\020\002\022\016\n\tPCT"
    "_OTHER\020\376\001\022\020\n\013PCT_UNKNOWN\020\377\001\"t\n\017CommonBas"
    "icInfo\022\030\n\020software_version\030\001 \001(\t\022\030\n\020hard"
    "ware_version\030\002 \001(\t\022-\n\022service_state_info"
    "\030\003 \001(\0132\021.ServiceStateInfo\"k\n\020ServiceStat"
    "eInfo\022$\n\rservice_state\030\001 \001(\0162\r.ServiceSt"
    "ate\0221\n\024service_state_reason\030\002 \001(\0162\023.Serv"
    "iceStateReason\"c\n\021ConnectivityState\022*\n\020n"
    "etwork_operator\030\001 \001(\0162\020.NetworkOperator\022"
    "\"\n\014network_type\030\002 \001(\0162\014.NetworkType\"\254\004\n\021"
    "ChargingConnector\022\035\n\025charging_connector_"
    "id\030\001 \001(\t\022B\n\035charging_connector_work_stat"
    "e\030\002 \001(\0162\033.ChargingConnectorWorkState\022N\n#"
    "charging_connector_connection_state\030\003 \001("
    "\0162!.ChargingConnectorConnectionState\022D\n\036"
    "charging_connector_fault_state\030\004 \001(\0162\034.C"
    "hargingConnectorFaultState\022M\n#power_char"
    "ger_connector_output_type\030\005 \001(\0162 .PowerC"
    "hargerConnectorOutputType\022Y\n,power_charg"
    "er_connector_rated_output_voltage\030\006 \001(\0162"
    "#.PowerChargerConnectorOutputVoltage\0222\n*"
    "power_charger_connector_rated_output_pow"
    "er\030\007 \001(\002\022\037\n\027realtime_output_voltage\030\010 \001("
    "\002\022\037\n\027realtime_output_current\030\t \001(\002\"Y\n\005Al"
    "arm\022\025\n\ralarm_type_id\030\001 \001(\r\022\027\n\017alarm_time"
    "stamp\030\002 \001(\003\022 \n\013alarm_state\030\003 \001(\0162\013.Alarm"
    "State\"W\n\022LocalConfiguration\022\014\n\004full\030\001 \001("
    "\010\0223\n\022configuration_info\030\002 \003(\0132\027.LocalCon"
    "figurationInfo\"\322\001\n\026LocalConfigurationInf"
    "o\022\031\n\021configuration_key\030\001 \001(\t\022\033\n\023configur"
    "ation_value\030\002 \001(\014\022O\n$local_configuration"
    "_info_access_type\030\003 \001(\0162!.LocalConfigura"
    "tionInfoAccessType\022\030\n\020has_been_updated\030\004"
    " \001(\010\022\025\n\rfailureReason\030\005 \001(\t\"\260\001\n\017RemoteOp"
    "eration\022\031\n\021message_timestamp\030\001 \001(\003\0222\n\024re"
    "mote_configuration\030\002 \001(\0132\024.RemoteConfigu"
    "ration\022&\n\016remote_control\030\003 \001(\0132\016.RemoteC"
    "ontrol\022&\n\016remote_upgrade\030\004 \001(\0132\016.RemoteU"
    "pgrade\"f\n\023RemoteConfiguration\022\022\n\nrequest"
    "_id\030\001 \001(\t\022;\n\031remote_configuration_info\030\002"
    " \003(\0132\030.RemoteConfigurationInfo\"Q\n\027Remote"
    "ConfigurationInfo\022\031\n\021configuration_key\030\001"
    " \001(\t\022\033\n\023configuration_value\030\002 \001(\014\"\215\001\n\rRe"
    "moteControl\022\022\n\nrequest_id\030\001 \001(\t\0225\n\026remot"
    "e_control_command\030\002 \001(\0162\025.RemoteControlC"
    "ommand\0221\n\024remote_control_param\030\003 \003(\0132\023.R"
    "emoteControlParam\"0\n\022RemoteControlParam\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"R\n\rRemoteUpg"
    "rade\022\022\n\nrequest_id\030\001 \001(\t\022\030\n\020software_ver"
    "sion\030\002 \001(\t\022\023\n\013ftp_address\030\003 \001(\t\"\320\001\n\027Remo"
    "teOperationResponse\022C\n\035remote_configurat"
    "ion_response\030\001 \001(\0132\034.RemoteConfiguration"
    "Response\0227\n\027remote_control_response\030\002 \001("
    "\0132\026.RemoteControlResponse\0227\n\027remote_upgr"
    "ade_response\030\003 \001(\0132\026.RemoteUpgradeRespon"
    "se\"\336\001\n\033RemoteConfigurationResponse\022\022\n\nre"
    "quest_id\030\001 \001(\t\022\021\n\tdevice_id\030\002 \001(\t\022L\n\"rem"
    "ote_configuration_response_type\030\003 \001(\0162 ."
    "RemoteConfigurationResponseType\022\025\n\rfailu"
    "reReason\030\004 \001(\t\0223\n\022configuration_info\030\005 \003"
    "(\0132\027.LocalConfigurationInfo\"\227\001\n\025RemoteCo"
    "ntrolResponse\022\022\n\nrequest_id\030\001 \001(\t\022\021\n\tdev"
    "ice_id\030\002 \001(\t\022@\n\034remote_control_response_"
    "type\030\003 \001(\0162\032.RemoteControlResponseType\022\025"
    "\n\rfailureReason\030\004 \001(\t\">\n\025RemoteUpgradeRe"
    "sponse\022\022\n\nrequest_id\030\001 \001(\t\022\021\n\tdevice_id\030"
    "\002 \001(\t*\225\001\n\014ServiceState\022\017\n\013SS_ON_GOING\020\000\022"
    "\016\n\nSS_WAITING\020\001\022\013\n\007SS_STOP\020\002\022\014\n\010SS_PAUSE"
    "\020\003\022\031\n\025SS_UNDER_CONSTRUCTION\020\004\022\016\n\nSS_OFFL"
    "INE\020\005\022\r\n\010SS_OTHER\020\376\001\022\017\n\nSS_UNKNOWN\020\377\001*\350\001"
    "\n\022ServiceStateReason\022\024\n\020SSR_OUT_OF_POWER"
    "\020\000\022\025\n\021SSR_LACK_OF_RANGE\020\001\022 \n\034SSR_ALTERNA"
    "TIVE_TRANSLATIONS\020\002\022\020\n\014SSR_OFF_WORK\020\003\022\017\n"
    "\013SSR_UPGRADE\020\004\022\020\n\014SSR_DOWNTIME\020\005\022\023\n\017SSR_"
    "MAINTENANCE\020\006\022\027\n\023SSR_SUPPLEMENTATION\020\007\022\016"
    "\n\tSSR_OTHER\020\376\001\022\020\n\013SSR_UNKNOWN\020\377\001*q\n\017Netw"
    "orkOperator\022\023\n\017NO_CHINA_MOBILE\020\000\022\023\n\017NO_C"
    "HINA_UNICOM\020\001\022\024\n\020NO_CHINA_TELECOM\020\002\022\r\n\010N"
    "O_OTHER\020\376\001\022\017\n\nNO_UNKNOWN\020\377\001*m\n\013NetworkTy"
    "pe\022\013\n\007NT_RJ45\020\000\022\017\n\013NT_RADIO_2G\020\001\022\017\n\013NT_R"
    "ADIO_3G\020\002\022\017\n\013NT_RADIO_4G\020\003\022\r\n\010NT_OTHER\020\376"
    "\001\022\017\n\nNT_UNKNOWN\020\377\001*]\n\032ChargingConnectorW"
    "orkState\022\r\n\tCCWS_FREE\020\000\022\024\n\020CCWS_IN_CHARG"
    "ING\020\001\022\032\n\026CCWS_CHARGING_COMPLETE\020\003*M\n Cha"
    "rgingConnectorConnectionState\022\022\n\016CCCS_CO"
    "NNECTED\020\000\022\025\n\021CCCS_DISCONNECTED\020\001*G\n\033Char"
    "gingConnectorFaultState\022\021\n\rCCFS_NO_FAULT"
    "\020\000\022\025\n\021CCFS_HAVING_FAULT\020\001*P\n\037PowerCharge"
    "rConnectorOutputType\022\017\n\013COT_3_PHASE\020\000\022\r\n"
    "\tCOT_7_PIN\020\001\022\r\n\tCOT_9_PIN\020\002*\\\n\"PowerChar"
    "gerConnectorOutputVoltage\022\014\n\010COV_380V\020\000\022"
    "\014\n\010COV_220V\020\001\022\014\n\010COV_500V\020\002\022\014\n\010COV_750V\020"
    "\003*+\n\014ServiceEvent\022\014\n\010SE_START\020\000\022\r\n\tSE_FI"
    "NISH\020\001*0\n\023ServiceFinishResult\022\n\n\006SFR_OK\020"
    "\000\022\r\n\tSFR_ERROR\020\001*,\n\nAlarmState\022\017\n\013AS_INA"
    "CTIVE\020\000\022\r\n\tAS_ACTIVE\020\001*K\n LocalConfigura"
    "tionInfoAccessType\022\022\n\016LCIAT_READONLY\020\000\022\023"
    "\n\017LCIAT_READWRITE\020\001*\255\001\n\024RemoteControlCom"
    "mand\022\020\n\014RCC_SHUTDOWN\020\000\022\016\n\nRCC_REBOOT\020\001\022\030"
    "\n\024RCC_ENABLE_CONNECTOR\020\002\022\031\n\025RCC_DISABLE_"
    "CONNECTOR\020\003\022\026\n\022RCC_START_CHARGING\020\004\022\025\n\021R"
    "CC_STOP_CHARGING\020\005\022\017\n\013RCC_STARTUP\020\006*m\n\037R"
    "emoteConfigurationResponseType\022\024\n\020RCONFR"
    "T_RECEIVED\020\000\022\027\n\023RCONFRT_FINISHED_OK\020\001\022\033\n"
    "\027RCONFRT_FINISHED_FAILED\020\002*g\n\031RemoteCont"
    "rolResponseType\022\024\n\020RCONTRT_RECEIVED\020\000\022\027\n"
    "\023RCONTRT_FINISHED_OK\020\001\022\033\n\027RCONTRT_FINISH"
    "ED_FAILED\020\002B.\n\035com.nextev.messaging.prot"
    "obufB\rNextEVMessage", 5659);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messageall.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message_ParamType::default_instance_ = new Message_ParamType();
  ACPowerCharger::default_instance_ = new ACPowerCharger();
  ACPowerCharger_BasicInfo::default_instance_ = new ACPowerCharger_BasicInfo();
  ACPowerCharger_RealtimeInfo::default_instance_ = new ACPowerCharger_RealtimeInfo();
  ACPowerCharger_ServiceInfo::default_instance_ = new ACPowerCharger_ServiceInfo();
  CommonBasicInfo::default_instance_ = new CommonBasicInfo();
  ServiceStateInfo::default_instance_ = new ServiceStateInfo();
  ConnectivityState::default_instance_ = new ConnectivityState();
  ChargingConnector::default_instance_ = new ChargingConnector();
  Alarm::default_instance_ = new Alarm();
  LocalConfiguration::default_instance_ = new LocalConfiguration();
  LocalConfigurationInfo::default_instance_ = new LocalConfigurationInfo();
  RemoteOperation::default_instance_ = new RemoteOperation();
  RemoteConfiguration::default_instance_ = new RemoteConfiguration();
  RemoteConfigurationInfo::default_instance_ = new RemoteConfigurationInfo();
  RemoteControl::default_instance_ = new RemoteControl();
  RemoteControlParam::default_instance_ = new RemoteControlParam();
  RemoteUpgrade::default_instance_ = new RemoteUpgrade();
  RemoteOperationResponse::default_instance_ = new RemoteOperationResponse();
  RemoteConfigurationResponse::default_instance_ = new RemoteConfigurationResponse();
  RemoteControlResponse::default_instance_ = new RemoteControlResponse();
  RemoteUpgradeResponse::default_instance_ = new RemoteUpgradeResponse();
  Message::default_instance_->InitAsDefaultInstance();
  Message_ParamType::default_instance_->InitAsDefaultInstance();
  ACPowerCharger::default_instance_->InitAsDefaultInstance();
  ACPowerCharger_BasicInfo::default_instance_->InitAsDefaultInstance();
  ACPowerCharger_RealtimeInfo::default_instance_->InitAsDefaultInstance();
  ACPowerCharger_ServiceInfo::default_instance_->InitAsDefaultInstance();
  CommonBasicInfo::default_instance_->InitAsDefaultInstance();
  ServiceStateInfo::default_instance_->InitAsDefaultInstance();
  ConnectivityState::default_instance_->InitAsDefaultInstance();
  ChargingConnector::default_instance_->InitAsDefaultInstance();
  Alarm::default_instance_->InitAsDefaultInstance();
  LocalConfiguration::default_instance_->InitAsDefaultInstance();
  LocalConfigurationInfo::default_instance_->InitAsDefaultInstance();
  RemoteOperation::default_instance_->InitAsDefaultInstance();
  RemoteConfiguration::default_instance_->InitAsDefaultInstance();
  RemoteConfigurationInfo::default_instance_->InitAsDefaultInstance();
  RemoteControl::default_instance_->InitAsDefaultInstance();
  RemoteControlParam::default_instance_->InitAsDefaultInstance();
  RemoteUpgrade::default_instance_->InitAsDefaultInstance();
  RemoteOperationResponse::default_instance_->InitAsDefaultInstance();
  RemoteConfigurationResponse::default_instance_->InitAsDefaultInstance();
  RemoteControlResponse::default_instance_->InitAsDefaultInstance();
  RemoteUpgradeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messageall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messageall_2eproto {
  StaticDescriptorInitializer_messageall_2eproto() {
    protobuf_AddDesc_messageall_2eproto();
  }
} static_descriptor_initializer_messageall_2eproto_;
const ::google::protobuf::EnumDescriptor* ServiceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceState_descriptor_;
}
bool ServiceState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceStateReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceStateReason_descriptor_;
}
bool ServiceStateReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetworkOperator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkOperator_descriptor_;
}
bool NetworkOperator_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetworkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkType_descriptor_;
}
bool NetworkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChargingConnectorWorkState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargingConnectorWorkState_descriptor_;
}
bool ChargingConnectorWorkState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChargingConnectorConnectionState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargingConnectorConnectionState_descriptor_;
}
bool ChargingConnectorConnectionState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChargingConnectorFaultState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargingConnectorFaultState_descriptor_;
}
bool ChargingConnectorFaultState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PowerChargerConnectorOutputType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerChargerConnectorOutputType_descriptor_;
}
bool PowerChargerConnectorOutputType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PowerChargerConnectorOutputVoltage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerChargerConnectorOutputVoltage_descriptor_;
}
bool PowerChargerConnectorOutputVoltage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceEvent_descriptor_;
}
bool ServiceEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceFinishResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceFinishResult_descriptor_;
}
bool ServiceFinishResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlarmState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmState_descriptor_;
}
bool AlarmState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalConfigurationInfoAccessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalConfigurationInfoAccessType_descriptor_;
}
bool LocalConfigurationInfoAccessType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RemoteControlCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteControlCommand_descriptor_;
}
bool RemoteControlCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RemoteConfigurationResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteConfigurationResponseType_descriptor_;
}
bool RemoteConfigurationResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RemoteControlResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteControlResponseType_descriptor_;
}
bool RemoteControlResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MessageType_descriptor_;
}
bool Message_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_MessageType Message::NOTIFICATION;
const Message_MessageType Message::CONTROL_COMMAND;
const Message_MessageType Message::COMMAND_RESULT;
const Message_MessageType Message::DATA_REPORT;
const Message_MessageType Message::CLIENT_STATUS;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message_ParamType::kKeyFieldNumber;
const int Message_ParamType::kValueFieldNumber;
#endif  // !_MSC_VER

Message_ParamType::Message_ParamType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_ParamType::InitAsDefaultInstance() {
}

Message_ParamType::Message_ParamType(const Message_ParamType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_ParamType::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_ParamType::~Message_ParamType() {
  SharedDtor();
}

void Message_ParamType::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Message_ParamType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_ParamType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_ParamType_descriptor_;
}

const Message_ParamType& Message_ParamType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

Message_ParamType* Message_ParamType::default_instance_ = NULL;

Message_ParamType* Message_ParamType::New() const {
  return new Message_ParamType;
}

void Message_ParamType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_ParamType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_ParamType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_ParamType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_ParamType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_ParamType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_ParamType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_ParamType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_ParamType::MergeFrom(const Message_ParamType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_ParamType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_ParamType::CopyFrom(const Message_ParamType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ParamType::IsInitialized() const {

  return true;
}

void Message_ParamType::Swap(Message_ParamType* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_ParamType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_ParamType_descriptor_;
  metadata.reflection = Message_ParamType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message::kVersionFieldNumber;
const int Message::kIdFieldNumber;
const int Message::kPublishTsFieldNumber;
const int Message::kTtlFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kSubTypeFieldNumber;
const int Message::kParamsFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publish_ts_ = GOOGLE_LONGLONG(0);
  ttl_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  sub_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (sub_type_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_type_;
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    publish_ts_ = GOOGLE_LONGLONG(0);
    ttl_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_sub_type()) {
      if (sub_type_ != &::google::protobuf::internal::kEmptyString) {
        sub_type_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_publish_ts;
        break;
      }

      // optional int64 publish_ts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publish_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publish_ts_)));
          set_has_publish_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ttl;
        break;
      }

      // optional int64 ttl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .Message.MessageType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Message_MessageType_IsValid(value)) {
            set_type(static_cast< ::Message_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sub_type;
        break;
      }

      // optional string sub_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sub_type().data(), this->sub_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_params;
        break;
      }

      // repeated .Message.ParamType params = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // optional int64 publish_ts = 3;
  if (has_publish_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->publish_ts(), output);
  }

  // optional int64 ttl = 4;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ttl(), output);
  }

  // optional .Message.MessageType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string sub_type = 6;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_type().data(), this->sub_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sub_type(), output);
  }

  // repeated .Message.ParamType params = 7;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional int64 publish_ts = 3;
  if (has_publish_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->publish_ts(), target);
  }

  // optional int64 ttl = 4;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ttl(), target);
  }

  // optional .Message.MessageType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string sub_type = 6;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_type().data(), this->sub_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sub_type(), target);
  }

  // repeated .Message.ParamType params = 7;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 publish_ts = 3;
    if (has_publish_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->publish_ts());
    }

    // optional int64 ttl = 4;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ttl());
    }

    // optional .Message.MessageType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string sub_type = 6;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_type());
    }

  }
  // repeated .Message.ParamType params = 7;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_publish_ts()) {
      set_publish_ts(from.publish_ts());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(id_, other->id_);
    std::swap(publish_ts_, other->publish_ts_);
    std::swap(ttl_, other->ttl_);
    std::swap(type_, other->type_);
    std::swap(sub_type_, other->sub_type_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ACPowerCharger_DeviceWorkState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_DeviceWorkState_descriptor_;
}
bool ACPowerCharger_DeviceWorkState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ACPowerCharger_DeviceWorkState ACPowerCharger::DWS_FREE;
const ACPowerCharger_DeviceWorkState ACPowerCharger::DWS_IN_CHARGING;
const ACPowerCharger_DeviceWorkState ACPowerCharger::DeviceWorkState_MIN;
const ACPowerCharger_DeviceWorkState ACPowerCharger::DeviceWorkState_MAX;
const int ACPowerCharger::DeviceWorkState_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ACPowerCharger_PowerChargerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_PowerChargerType_descriptor_;
}
bool ACPowerCharger_PowerChargerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_AC_ONLY;
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_DC_ONLY;
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_AC_DC_HYBRID;
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_OTHER;
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_UNKNOWN;
const ACPowerCharger_PowerChargerType ACPowerCharger::PowerChargerType_MIN;
const ACPowerCharger_PowerChargerType ACPowerCharger::PowerChargerType_MAX;
const int ACPowerCharger::PowerChargerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ACPowerCharger_BasicInfo::kCommonBasicInfoFieldNumber;
const int ACPowerCharger_BasicInfo::kPowerChargerTypeFieldNumber;
const int ACPowerCharger_BasicInfo::kChargingConnectorQuantityFieldNumber;
const int ACPowerCharger_BasicInfo::kPowerFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger_BasicInfo::ACPowerCharger_BasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger_BasicInfo::InitAsDefaultInstance() {
  common_basic_info_ = const_cast< ::CommonBasicInfo*>(&::CommonBasicInfo::default_instance());
}

ACPowerCharger_BasicInfo::ACPowerCharger_BasicInfo(const ACPowerCharger_BasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger_BasicInfo::SharedCtor() {
  _cached_size_ = 0;
  common_basic_info_ = NULL;
  power_charger_type_ = 0;
  charging_connector_quantity_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger_BasicInfo::~ACPowerCharger_BasicInfo() {
  SharedDtor();
}

void ACPowerCharger_BasicInfo::SharedDtor() {
  if (this != default_instance_) {
    delete common_basic_info_;
  }
}

void ACPowerCharger_BasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger_BasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_BasicInfo_descriptor_;
}

const ACPowerCharger_BasicInfo& ACPowerCharger_BasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

ACPowerCharger_BasicInfo* ACPowerCharger_BasicInfo::default_instance_ = NULL;

ACPowerCharger_BasicInfo* ACPowerCharger_BasicInfo::New() const {
  return new ACPowerCharger_BasicInfo;
}

void ACPowerCharger_BasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_basic_info()) {
      if (common_basic_info_ != NULL) common_basic_info_->::CommonBasicInfo::Clear();
    }
    power_charger_type_ = 0;
    charging_connector_quantity_ = 0;
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger_BasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CommonBasicInfo common_basic_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_power_charger_type;
        break;
      }

      // optional .ACPowerCharger.PowerChargerType power_charger_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_charger_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ACPowerCharger_PowerChargerType_IsValid(value)) {
            set_power_charger_type(static_cast< ::ACPowerCharger_PowerChargerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charging_connector_quantity;
        break;
      }

      // optional int32 charging_connector_quantity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_connector_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charging_connector_quantity_)));
          set_has_charging_connector_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_power;
        break;
      }

      // optional float power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger_BasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CommonBasicInfo common_basic_info = 1;
  if (has_common_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_basic_info(), output);
  }

  // optional .ACPowerCharger.PowerChargerType power_charger_type = 2;
  if (has_power_charger_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->power_charger_type(), output);
  }

  // optional int32 charging_connector_quantity = 3;
  if (has_charging_connector_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->charging_connector_quantity(), output);
  }

  // optional float power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger_BasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CommonBasicInfo common_basic_info = 1;
  if (has_common_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_basic_info(), target);
  }

  // optional .ACPowerCharger.PowerChargerType power_charger_type = 2;
  if (has_power_charger_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->power_charger_type(), target);
  }

  // optional int32 charging_connector_quantity = 3;
  if (has_charging_connector_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->charging_connector_quantity(), target);
  }

  // optional float power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger_BasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CommonBasicInfo common_basic_info = 1;
    if (has_common_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_basic_info());
    }

    // optional .ACPowerCharger.PowerChargerType power_charger_type = 2;
    if (has_power_charger_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_charger_type());
    }

    // optional int32 charging_connector_quantity = 3;
    if (has_charging_connector_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charging_connector_quantity());
    }

    // optional float power = 4;
    if (has_power()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger_BasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger_BasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger_BasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger_BasicInfo::MergeFrom(const ACPowerCharger_BasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_basic_info()) {
      mutable_common_basic_info()->::CommonBasicInfo::MergeFrom(from.common_basic_info());
    }
    if (from.has_power_charger_type()) {
      set_power_charger_type(from.power_charger_type());
    }
    if (from.has_charging_connector_quantity()) {
      set_charging_connector_quantity(from.charging_connector_quantity());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger_BasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger_BasicInfo::CopyFrom(const ACPowerCharger_BasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger_BasicInfo::IsInitialized() const {

  return true;
}

void ACPowerCharger_BasicInfo::Swap(ACPowerCharger_BasicInfo* other) {
  if (other != this) {
    std::swap(common_basic_info_, other->common_basic_info_);
    std::swap(power_charger_type_, other->power_charger_type_);
    std::swap(charging_connector_quantity_, other->charging_connector_quantity_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger_BasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_BasicInfo_descriptor_;
  metadata.reflection = ACPowerCharger_BasicInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACPowerCharger_RealtimeInfo::kConnectivityStateFieldNumber;
const int ACPowerCharger_RealtimeInfo::kDeviceWorkStateFieldNumber;
const int ACPowerCharger_RealtimeInfo::kChargingConnectorFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger_RealtimeInfo::ACPowerCharger_RealtimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger_RealtimeInfo::InitAsDefaultInstance() {
  connectivity_state_ = const_cast< ::ConnectivityState*>(&::ConnectivityState::default_instance());
}

ACPowerCharger_RealtimeInfo::ACPowerCharger_RealtimeInfo(const ACPowerCharger_RealtimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger_RealtimeInfo::SharedCtor() {
  _cached_size_ = 0;
  connectivity_state_ = NULL;
  device_work_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger_RealtimeInfo::~ACPowerCharger_RealtimeInfo() {
  SharedDtor();
}

void ACPowerCharger_RealtimeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete connectivity_state_;
  }
}

void ACPowerCharger_RealtimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger_RealtimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_RealtimeInfo_descriptor_;
}

const ACPowerCharger_RealtimeInfo& ACPowerCharger_RealtimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

ACPowerCharger_RealtimeInfo* ACPowerCharger_RealtimeInfo::default_instance_ = NULL;

ACPowerCharger_RealtimeInfo* ACPowerCharger_RealtimeInfo::New() const {
  return new ACPowerCharger_RealtimeInfo;
}

void ACPowerCharger_RealtimeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_connectivity_state()) {
      if (connectivity_state_ != NULL) connectivity_state_->::ConnectivityState::Clear();
    }
    device_work_state_ = 0;
  }
  charging_connector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger_RealtimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ConnectivityState connectivity_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectivity_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_work_state;
        break;
      }

      // optional .ACPowerCharger.DeviceWorkState device_work_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_work_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ACPowerCharger_DeviceWorkState_IsValid(value)) {
            set_device_work_state(static_cast< ::ACPowerCharger_DeviceWorkState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charging_connector;
        break;
      }

      // repeated .ChargingConnector charging_connector = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charging_connector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charging_connector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charging_connector;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger_RealtimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ConnectivityState connectivity_state = 1;
  if (has_connectivity_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connectivity_state(), output);
  }

  // optional .ACPowerCharger.DeviceWorkState device_work_state = 2;
  if (has_device_work_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_work_state(), output);
  }

  // repeated .ChargingConnector charging_connector = 4;
  for (int i = 0; i < this->charging_connector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->charging_connector(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger_RealtimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ConnectivityState connectivity_state = 1;
  if (has_connectivity_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connectivity_state(), target);
  }

  // optional .ACPowerCharger.DeviceWorkState device_work_state = 2;
  if (has_device_work_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_work_state(), target);
  }

  // repeated .ChargingConnector charging_connector = 4;
  for (int i = 0; i < this->charging_connector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->charging_connector(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger_RealtimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ConnectivityState connectivity_state = 1;
    if (has_connectivity_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectivity_state());
    }

    // optional .ACPowerCharger.DeviceWorkState device_work_state = 2;
    if (has_device_work_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_work_state());
    }

  }
  // repeated .ChargingConnector charging_connector = 4;
  total_size += 1 * this->charging_connector_size();
  for (int i = 0; i < this->charging_connector_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charging_connector(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger_RealtimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger_RealtimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger_RealtimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger_RealtimeInfo::MergeFrom(const ACPowerCharger_RealtimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  charging_connector_.MergeFrom(from.charging_connector_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectivity_state()) {
      mutable_connectivity_state()->::ConnectivityState::MergeFrom(from.connectivity_state());
    }
    if (from.has_device_work_state()) {
      set_device_work_state(from.device_work_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger_RealtimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger_RealtimeInfo::CopyFrom(const ACPowerCharger_RealtimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger_RealtimeInfo::IsInitialized() const {

  return true;
}

void ACPowerCharger_RealtimeInfo::Swap(ACPowerCharger_RealtimeInfo* other) {
  if (other != this) {
    std::swap(connectivity_state_, other->connectivity_state_);
    std::swap(device_work_state_, other->device_work_state_);
    charging_connector_.Swap(&other->charging_connector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger_RealtimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_RealtimeInfo_descriptor_;
  metadata.reflection = ACPowerCharger_RealtimeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACPowerCharger_ServiceInfo::kServiceIdFieldNumber;
const int ACPowerCharger_ServiceInfo::kServiceEventFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargingEventTimestampFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargingConnectorIdFieldNumber;
const int ACPowerCharger_ServiceInfo::kRealtimeChargedEnergyFieldNumber;
const int ACPowerCharger_ServiceInfo::kServiceFinishResultFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargedEnergyTotalFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger_ServiceInfo::ACPowerCharger_ServiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger_ServiceInfo::InitAsDefaultInstance() {
}

ACPowerCharger_ServiceInfo::ACPowerCharger_ServiceInfo(const ACPowerCharger_ServiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger_ServiceInfo::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_event_ = 0;
  charging_event_timestamp_ = GOOGLE_LONGLONG(0);
  charging_connector_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realtime_charged_energy_ = 0;
  service_finish_result_ = 0;
  charged_energy_total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger_ServiceInfo::~ACPowerCharger_ServiceInfo() {
  SharedDtor();
}

void ACPowerCharger_ServiceInfo::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (charging_connector_id_ != &::google::protobuf::internal::kEmptyString) {
    delete charging_connector_id_;
  }
  if (this != default_instance_) {
  }
}

void ACPowerCharger_ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger_ServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_ServiceInfo_descriptor_;
}

const ACPowerCharger_ServiceInfo& ACPowerCharger_ServiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

ACPowerCharger_ServiceInfo* ACPowerCharger_ServiceInfo::default_instance_ = NULL;

ACPowerCharger_ServiceInfo* ACPowerCharger_ServiceInfo::New() const {
  return new ACPowerCharger_ServiceInfo;
}

void ACPowerCharger_ServiceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    service_event_ = 0;
    charging_event_timestamp_ = GOOGLE_LONGLONG(0);
    if (has_charging_connector_id()) {
      if (charging_connector_id_ != &::google::protobuf::internal::kEmptyString) {
        charging_connector_id_->clear();
      }
    }
    realtime_charged_energy_ = 0;
    service_finish_result_ = 0;
    charged_energy_total_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger_ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service_event;
        break;
      }

      // optional .ServiceEvent service_event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServiceEvent_IsValid(value)) {
            set_service_event(static_cast< ::ServiceEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charging_event_timestamp;
        break;
      }

      // optional int64 charging_event_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_event_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charging_event_timestamp_)));
          set_has_charging_event_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charging_connector_id;
        break;
      }

      // optional string charging_connector_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charging_connector_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charging_connector_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charging_connector_id().data(), this->charging_connector_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_realtime_charged_energy;
        break;
      }

      // optional float realtime_charged_energy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_realtime_charged_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &realtime_charged_energy_)));
          set_has_realtime_charged_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_service_finish_result;
        break;
      }

      // optional .ServiceFinishResult service_finish_result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_finish_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServiceFinishResult_IsValid(value)) {
            set_service_finish_result(static_cast< ::ServiceFinishResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_charged_energy_total;
        break;
      }

      // optional float charged_energy_total = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_charged_energy_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charged_energy_total_)));
          set_has_charged_energy_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger_ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }

  // optional .ServiceEvent service_event = 2;
  if (has_service_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service_event(), output);
  }

  // optional int64 charging_event_timestamp = 3;
  if (has_charging_event_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charging_event_timestamp(), output);
  }

  // optional string charging_connector_id = 4;
  if (has_charging_connector_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charging_connector_id().data(), this->charging_connector_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->charging_connector_id(), output);
  }

  // optional float realtime_charged_energy = 5;
  if (has_realtime_charged_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->realtime_charged_energy(), output);
  }

  // optional .ServiceFinishResult service_finish_result = 6;
  if (has_service_finish_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->service_finish_result(), output);
  }

  // optional float charged_energy_total = 7;
  if (has_charged_energy_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->charged_energy_total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger_ServiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }

  // optional .ServiceEvent service_event = 2;
  if (has_service_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service_event(), target);
  }

  // optional int64 charging_event_timestamp = 3;
  if (has_charging_event_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charging_event_timestamp(), target);
  }

  // optional string charging_connector_id = 4;
  if (has_charging_connector_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charging_connector_id().data(), this->charging_connector_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charging_connector_id(), target);
  }

  // optional float realtime_charged_energy = 5;
  if (has_realtime_charged_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->realtime_charged_energy(), target);
  }

  // optional .ServiceFinishResult service_finish_result = 6;
  if (has_service_finish_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->service_finish_result(), target);
  }

  // optional float charged_energy_total = 7;
  if (has_charged_energy_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->charged_energy_total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger_ServiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }

    // optional .ServiceEvent service_event = 2;
    if (has_service_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_event());
    }

    // optional int64 charging_event_timestamp = 3;
    if (has_charging_event_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charging_event_timestamp());
    }

    // optional string charging_connector_id = 4;
    if (has_charging_connector_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charging_connector_id());
    }

    // optional float realtime_charged_energy = 5;
    if (has_realtime_charged_energy()) {
      total_size += 1 + 4;
    }

    // optional .ServiceFinishResult service_finish_result = 6;
    if (has_service_finish_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_finish_result());
    }

    // optional float charged_energy_total = 7;
    if (has_charged_energy_total()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger_ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger_ServiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger_ServiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger_ServiceInfo::MergeFrom(const ACPowerCharger_ServiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_service_event()) {
      set_service_event(from.service_event());
    }
    if (from.has_charging_event_timestamp()) {
      set_charging_event_timestamp(from.charging_event_timestamp());
    }
    if (from.has_charging_connector_id()) {
      set_charging_connector_id(from.charging_connector_id());
    }
    if (from.has_realtime_charged_energy()) {
      set_realtime_charged_energy(from.realtime_charged_energy());
    }
    if (from.has_service_finish_result()) {
      set_service_finish_result(from.service_finish_result());
    }
    if (from.has_charged_energy_total()) {
      set_charged_energy_total(from.charged_energy_total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger_ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger_ServiceInfo::CopyFrom(const ACPowerCharger_ServiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger_ServiceInfo::IsInitialized() const {

  return true;
}

void ACPowerCharger_ServiceInfo::Swap(ACPowerCharger_ServiceInfo* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(service_event_, other->service_event_);
    std::swap(charging_event_timestamp_, other->charging_event_timestamp_);
    std::swap(charging_connector_id_, other->charging_connector_id_);
    std::swap(realtime_charged_energy_, other->realtime_charged_energy_);
    std::swap(service_finish_result_, other->service_finish_result_);
    std::swap(charged_energy_total_, other->charged_energy_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger_ServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_ServiceInfo_descriptor_;
  metadata.reflection = ACPowerCharger_ServiceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACPowerCharger::kDeviceIdFieldNumber;
const int ACPowerCharger::kMessageTimestampFieldNumber;
const int ACPowerCharger::kBasicInfoFieldNumber;
const int ACPowerCharger::kRealtimeInfoFieldNumber;
const int ACPowerCharger::kAlarmsFieldNumber;
const int ACPowerCharger::kServiceInfoFieldNumber;
const int ACPowerCharger::kLocalConfigurationFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger::ACPowerCharger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger::InitAsDefaultInstance() {
  basicinfo_ = const_cast< ::ACPowerCharger_BasicInfo*>(&::ACPowerCharger_BasicInfo::default_instance());
  realtime_info_ = const_cast< ::ACPowerCharger_RealtimeInfo*>(&::ACPowerCharger_RealtimeInfo::default_instance());
  local_configuration_ = const_cast< ::LocalConfiguration*>(&::LocalConfiguration::default_instance());
}

ACPowerCharger::ACPowerCharger(const ACPowerCharger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_timestamp_ = GOOGLE_LONGLONG(0);
  basicinfo_ = NULL;
  realtime_info_ = NULL;
  local_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger::~ACPowerCharger() {
  SharedDtor();
}

void ACPowerCharger::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
    delete basicinfo_;
    delete realtime_info_;
    delete local_configuration_;
  }
}

void ACPowerCharger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_descriptor_;
}

const ACPowerCharger& ACPowerCharger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

ACPowerCharger* ACPowerCharger::default_instance_ = NULL;

ACPowerCharger* ACPowerCharger::New() const {
  return new ACPowerCharger;
}

void ACPowerCharger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    message_timestamp_ = GOOGLE_LONGLONG(0);
    if (has_basicinfo()) {
      if (basicinfo_ != NULL) basicinfo_->::ACPowerCharger_BasicInfo::Clear();
    }
    if (has_realtime_info()) {
      if (realtime_info_ != NULL) realtime_info_->::ACPowerCharger_RealtimeInfo::Clear();
    }
    if (has_local_configuration()) {
      if (local_configuration_ != NULL) local_configuration_->::LocalConfiguration::Clear();
    }
  }
  alarms_.Clear();
  service_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_message_timestamp;
        break;
      }

      // optional int64 message_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_timestamp_)));
          set_has_message_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_basicInfo;
        break;
      }

      // optional .ACPowerCharger.BasicInfo basicInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basicInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basicinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_realtime_info;
        break;
      }

      // optional .ACPowerCharger.RealtimeInfo realtime_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realtime_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realtime_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alarms;
        break;
      }

      // repeated .Alarm alarms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alarms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alarms;
        if (input->ExpectTag(50)) goto parse_service_info;
        break;
      }

      // repeated .ACPowerCharger.ServiceInfo service_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_service_info;
        if (input->ExpectTag(58)) goto parse_local_configuration;
        break;
      }

      // optional .LocalConfiguration local_configuration = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int64 message_timestamp = 2;
  if (has_message_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->message_timestamp(), output);
  }

  // optional .ACPowerCharger.BasicInfo basicInfo = 3;
  if (has_basicinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basicinfo(), output);
  }

  // optional .ACPowerCharger.RealtimeInfo realtime_info = 4;
  if (has_realtime_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->realtime_info(), output);
  }

  // repeated .Alarm alarms = 5;
  for (int i = 0; i < this->alarms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->alarms(i), output);
  }

  // repeated .ACPowerCharger.ServiceInfo service_info = 6;
  for (int i = 0; i < this->service_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->service_info(i), output);
  }

  // optional .LocalConfiguration local_configuration = 7;
  if (has_local_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->local_configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int64 message_timestamp = 2;
  if (has_message_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->message_timestamp(), target);
  }

  // optional .ACPowerCharger.BasicInfo basicInfo = 3;
  if (has_basicinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basicinfo(), target);
  }

  // optional .ACPowerCharger.RealtimeInfo realtime_info = 4;
  if (has_realtime_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->realtime_info(), target);
  }

  // repeated .Alarm alarms = 5;
  for (int i = 0; i < this->alarms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->alarms(i), target);
  }

  // repeated .ACPowerCharger.ServiceInfo service_info = 6;
  for (int i = 0; i < this->service_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->service_info(i), target);
  }

  // optional .LocalConfiguration local_configuration = 7;
  if (has_local_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->local_configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int64 message_timestamp = 2;
    if (has_message_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->message_timestamp());
    }

    // optional .ACPowerCharger.BasicInfo basicInfo = 3;
    if (has_basicinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basicinfo());
    }

    // optional .ACPowerCharger.RealtimeInfo realtime_info = 4;
    if (has_realtime_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->realtime_info());
    }

    // optional .LocalConfiguration local_configuration = 7;
    if (has_local_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local_configuration());
    }

  }
  // repeated .Alarm alarms = 5;
  total_size += 1 * this->alarms_size();
  for (int i = 0; i < this->alarms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alarms(i));
  }

  // repeated .ACPowerCharger.ServiceInfo service_info = 6;
  total_size += 1 * this->service_info_size();
  for (int i = 0; i < this->service_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger::MergeFrom(const ACPowerCharger& from) {
  GOOGLE_CHECK_NE(&from, this);
  alarms_.MergeFrom(from.alarms_);
  service_info_.MergeFrom(from.service_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_message_timestamp()) {
      set_message_timestamp(from.message_timestamp());
    }
    if (from.has_basicinfo()) {
      mutable_basicinfo()->::ACPowerCharger_BasicInfo::MergeFrom(from.basicinfo());
    }
    if (from.has_realtime_info()) {
      mutable_realtime_info()->::ACPowerCharger_RealtimeInfo::MergeFrom(from.realtime_info());
    }
    if (from.has_local_configuration()) {
      mutable_local_configuration()->::LocalConfiguration::MergeFrom(from.local_configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger::CopyFrom(const ACPowerCharger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger::IsInitialized() const {

  return true;
}

void ACPowerCharger::Swap(ACPowerCharger* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(message_timestamp_, other->message_timestamp_);
    std::swap(basicinfo_, other->basicinfo_);
    std::swap(realtime_info_, other->realtime_info_);
    alarms_.Swap(&other->alarms_);
    service_info_.Swap(&other->service_info_);
    std::swap(local_configuration_, other->local_configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_descriptor_;
  metadata.reflection = ACPowerCharger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonBasicInfo::kSoftwareVersionFieldNumber;
const int CommonBasicInfo::kHardwareVersionFieldNumber;
const int CommonBasicInfo::kServiceStateInfoFieldNumber;
#endif  // !_MSC_VER

CommonBasicInfo::CommonBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonBasicInfo::InitAsDefaultInstance() {
  service_state_info_ = const_cast< ::ServiceStateInfo*>(&::ServiceStateInfo::default_instance());
}

CommonBasicInfo::CommonBasicInfo(const CommonBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_state_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonBasicInfo::~CommonBasicInfo() {
  SharedDtor();
}

void CommonBasicInfo::SharedDtor() {
  if (software_version_ != &::google::protobuf::internal::kEmptyString) {
    delete software_version_;
  }
  if (hardware_version_ != &::google::protobuf::internal::kEmptyString) {
    delete hardware_version_;
  }
  if (this != default_instance_) {
    delete service_state_info_;
  }
}

void CommonBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonBasicInfo_descriptor_;
}

const CommonBasicInfo& CommonBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

CommonBasicInfo* CommonBasicInfo::default_instance_ = NULL;

CommonBasicInfo* CommonBasicInfo::New() const {
  return new CommonBasicInfo;
}

void CommonBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_software_version()) {
      if (software_version_ != &::google::protobuf::internal::kEmptyString) {
        software_version_->clear();
      }
    }
    if (has_hardware_version()) {
      if (hardware_version_ != &::google::protobuf::internal::kEmptyString) {
        hardware_version_->clear();
      }
    }
    if (has_service_state_info()) {
      if (service_state_info_ != NULL) service_state_info_->::ServiceStateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string software_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->software_version().data(), this->software_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hardware_version;
        break;
      }

      // optional string hardware_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hardware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hardware_version().data(), this->hardware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_state_info;
        break;
      }

      // optional .ServiceStateInfo service_state_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_state_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_state_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string software_version = 1;
  if (has_software_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software_version().data(), this->software_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->software_version(), output);
  }

  // optional string hardware_version = 2;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hardware_version(), output);
  }

  // optional .ServiceStateInfo service_state_info = 3;
  if (has_service_state_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->service_state_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string software_version = 1;
  if (has_software_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software_version().data(), this->software_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->software_version(), target);
  }

  // optional string hardware_version = 2;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hardware_version(), target);
  }

  // optional .ServiceStateInfo service_state_info = 3;
  if (has_service_state_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->service_state_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string software_version = 1;
    if (has_software_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software_version());
    }

    // optional string hardware_version = 2;
    if (has_hardware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_version());
    }

    // optional .ServiceStateInfo service_state_info = 3;
    if (has_service_state_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service_state_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonBasicInfo::MergeFrom(const CommonBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_software_version()) {
      set_software_version(from.software_version());
    }
    if (from.has_hardware_version()) {
      set_hardware_version(from.hardware_version());
    }
    if (from.has_service_state_info()) {
      mutable_service_state_info()->::ServiceStateInfo::MergeFrom(from.service_state_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonBasicInfo::CopyFrom(const CommonBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonBasicInfo::IsInitialized() const {

  return true;
}

void CommonBasicInfo::Swap(CommonBasicInfo* other) {
  if (other != this) {
    std::swap(software_version_, other->software_version_);
    std::swap(hardware_version_, other->hardware_version_);
    std::swap(service_state_info_, other->service_state_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonBasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonBasicInfo_descriptor_;
  metadata.reflection = CommonBasicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceStateInfo::kServiceStateFieldNumber;
const int ServiceStateInfo::kServiceStateReasonFieldNumber;
#endif  // !_MSC_VER

ServiceStateInfo::ServiceStateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceStateInfo::InitAsDefaultInstance() {
}

ServiceStateInfo::ServiceStateInfo(const ServiceStateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceStateInfo::SharedCtor() {
  _cached_size_ = 0;
  service_state_ = 0;
  service_state_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceStateInfo::~ServiceStateInfo() {
  SharedDtor();
}

void ServiceStateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceStateInfo_descriptor_;
}

const ServiceStateInfo& ServiceStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

ServiceStateInfo* ServiceStateInfo::default_instance_ = NULL;

ServiceStateInfo* ServiceStateInfo::New() const {
  return new ServiceStateInfo;
}

void ServiceStateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_state_ = 0;
    service_state_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ServiceState service_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServiceState_IsValid(value)) {
            set_service_state(static_cast< ::ServiceState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service_state_reason;
        break;
      }

      // optional .ServiceStateReason service_state_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_state_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServiceStateReason_IsValid(value)) {
            set_service_state_reason(static_cast< ::ServiceStateReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ServiceState service_state = 1;
  if (has_service_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->service_state(), output);
  }

  // optional .ServiceStateReason service_state_reason = 2;
  if (has_service_state_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service_state_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceStateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ServiceState service_state = 1;
  if (has_service_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->service_state(), target);
  }

  // optional .ServiceStateReason service_state_reason = 2;
  if (has_service_state_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service_state_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceStateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ServiceState service_state = 1;
    if (has_service_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_state());
    }

    // optional .ServiceStateReason service_state_reason = 2;
    if (has_service_state_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_state_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceStateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceStateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceStateInfo::MergeFrom(const ServiceStateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_state()) {
      set_service_state(from.service_state());
    }
    if (from.has_service_state_reason()) {
      set_service_state_reason(from.service_state_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStateInfo::CopyFrom(const ServiceStateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStateInfo::IsInitialized() const {

  return true;
}

void ServiceStateInfo::Swap(ServiceStateInfo* other) {
  if (other != this) {
    std::swap(service_state_, other->service_state_);
    std::swap(service_state_reason_, other->service_state_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceStateInfo_descriptor_;
  metadata.reflection = ServiceStateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectivityState::kNetworkOperatorFieldNumber;
const int ConnectivityState::kNetworkTypeFieldNumber;
#endif  // !_MSC_VER

ConnectivityState::ConnectivityState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectivityState::InitAsDefaultInstance() {
}

ConnectivityState::ConnectivityState(const ConnectivityState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectivityState::SharedCtor() {
  _cached_size_ = 0;
  network_operator_ = 0;
  network_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectivityState::~ConnectivityState() {
  SharedDtor();
}

void ConnectivityState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectivityState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectivityState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectivityState_descriptor_;
}

const ConnectivityState& ConnectivityState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

ConnectivityState* ConnectivityState::default_instance_ = NULL;

ConnectivityState* ConnectivityState::New() const {
  return new ConnectivityState;
}

void ConnectivityState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    network_operator_ = 0;
    network_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectivityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetworkOperator network_operator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetworkOperator_IsValid(value)) {
            set_network_operator(static_cast< ::NetworkOperator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_network_type;
        break;
      }

      // optional .NetworkType network_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetworkType_IsValid(value)) {
            set_network_type(static_cast< ::NetworkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectivityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetworkOperator network_operator = 1;
  if (has_network_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->network_operator(), output);
  }

  // optional .NetworkType network_type = 2;
  if (has_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->network_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectivityState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetworkOperator network_operator = 1;
  if (has_network_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->network_operator(), target);
  }

  // optional .NetworkType network_type = 2;
  if (has_network_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->network_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectivityState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetworkOperator network_operator = 1;
    if (has_network_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_operator());
    }

    // optional .NetworkType network_type = 2;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectivityState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectivityState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectivityState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectivityState::MergeFrom(const ConnectivityState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_network_operator()) {
      set_network_operator(from.network_operator());
    }
    if (from.has_network_type()) {
      set_network_type(from.network_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectivityState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectivityState::CopyFrom(const ConnectivityState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectivityState::IsInitialized() const {

  return true;
}

void ConnectivityState::Swap(ConnectivityState* other) {
  if (other != this) {
    std::swap(network_operator_, other->network_operator_);
    std::swap(network_type_, other->network_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectivityState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectivityState_descriptor_;
  metadata.reflection = ConnectivityState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargingConnector::kChargingConnectorIdFieldNumber;
const int ChargingConnector::kChargingConnectorWorkStateFieldNumber;
const int ChargingConnector::kChargingConnectorConnectionStateFieldNumber;
const int ChargingConnector::kChargingConnectorFaultStateFieldNumber;
const int ChargingConnector::kPowerChargerConnectorOutputTypeFieldNumber;
const int ChargingConnector::kPowerChargerConnectorRatedOutputVoltageFieldNumber;
const int ChargingConnector::kPowerChargerConnectorRatedOutputPowerFieldNumber;
const int ChargingConnector::kRealtimeOutputVoltageFieldNumber;
const int ChargingConnector::kRealtimeOutputCurrentFieldNumber;
#endif  // !_MSC_VER

ChargingConnector::ChargingConnector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargingConnector::InitAsDefaultInstance() {
}

ChargingConnector::ChargingConnector(const ChargingConnector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargingConnector::SharedCtor() {
  _cached_size_ = 0;
  charging_connector_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charging_connector_work_state_ = 0;
  charging_connector_connection_state_ = 0;
  charging_connector_fault_state_ = 0;
  power_charger_connector_output_type_ = 0;
  power_charger_connector_rated_output_voltage_ = 0;
  power_charger_connector_rated_output_power_ = 0;
  realtime_output_voltage_ = 0;
  realtime_output_current_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargingConnector::~ChargingConnector() {
  SharedDtor();
}

void ChargingConnector::SharedDtor() {
  if (charging_connector_id_ != &::google::protobuf::internal::kEmptyString) {
    delete charging_connector_id_;
  }
  if (this != default_instance_) {
  }
}

void ChargingConnector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargingConnector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargingConnector_descriptor_;
}

const ChargingConnector& ChargingConnector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

ChargingConnector* ChargingConnector::default_instance_ = NULL;

ChargingConnector* ChargingConnector::New() const {
  return new ChargingConnector;
}

void ChargingConnector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charging_connector_id()) {
      if (charging_connector_id_ != &::google::protobuf::internal::kEmptyString) {
        charging_connector_id_->clear();
      }
    }
    charging_connector_work_state_ = 0;
    charging_connector_connection_state_ = 0;
    charging_connector_fault_state_ = 0;
    power_charger_connector_output_type_ = 0;
    power_charger_connector_rated_output_voltage_ = 0;
    power_charger_connector_rated_output_power_ = 0;
    realtime_output_voltage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    realtime_output_current_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargingConnector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charging_connector_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charging_connector_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charging_connector_id().data(), this->charging_connector_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charging_connector_work_state;
        break;
      }

      // optional .ChargingConnectorWorkState charging_connector_work_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_connector_work_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChargingConnectorWorkState_IsValid(value)) {
            set_charging_connector_work_state(static_cast< ::ChargingConnectorWorkState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charging_connector_connection_state;
        break;
      }

      // optional .ChargingConnectorConnectionState charging_connector_connection_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_connector_connection_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChargingConnectorConnectionState_IsValid(value)) {
            set_charging_connector_connection_state(static_cast< ::ChargingConnectorConnectionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charging_connector_fault_state;
        break;
      }

      // optional .ChargingConnectorFaultState charging_connector_fault_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_connector_fault_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChargingConnectorFaultState_IsValid(value)) {
            set_charging_connector_fault_state(static_cast< ::ChargingConnectorFaultState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power_charger_connector_output_type;
        break;
      }

      // optional .PowerChargerConnectorOutputType power_charger_connector_output_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_charger_connector_output_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PowerChargerConnectorOutputType_IsValid(value)) {
            set_power_charger_connector_output_type(static_cast< ::PowerChargerConnectorOutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_power_charger_connector_rated_output_voltage;
        break;
      }

      // optional .PowerChargerConnectorOutputVoltage power_charger_connector_rated_output_voltage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_charger_connector_rated_output_voltage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PowerChargerConnectorOutputVoltage_IsValid(value)) {
            set_power_charger_connector_rated_output_voltage(static_cast< ::PowerChargerConnectorOutputVoltage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_power_charger_connector_rated_output_power;
        break;
      }

      // optional float power_charger_connector_rated_output_power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_power_charger_connector_rated_output_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_charger_connector_rated_output_power_)));
          set_has_power_charger_connector_rated_output_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_realtime_output_voltage;
        break;
      }

      // optional float realtime_output_voltage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_realtime_output_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &realtime_output_voltage_)));
          set_has_realtime_output_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_realtime_output_current;
        break;
      }

      // optional float realtime_output_current = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_realtime_output_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &realtime_output_current_)));
          set_has_realtime_output_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargingConnector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charging_connector_id = 1;
  if (has_charging_connector_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charging_connector_id().data(), this->charging_connector_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charging_connector_id(), output);
  }

  // optional .ChargingConnectorWorkState charging_connector_work_state = 2;
  if (has_charging_connector_work_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->charging_connector_work_state(), output);
  }

  // optional .ChargingConnectorConnectionState charging_connector_connection_state = 3;
  if (has_charging_connector_connection_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->charging_connector_connection_state(), output);
  }

  // optional .ChargingConnectorFaultState charging_connector_fault_state = 4;
  if (has_charging_connector_fault_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->charging_connector_fault_state(), output);
  }

  // optional .PowerChargerConnectorOutputType power_charger_connector_output_type = 5;
  if (has_power_charger_connector_output_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->power_charger_connector_output_type(), output);
  }

  // optional .PowerChargerConnectorOutputVoltage power_charger_connector_rated_output_voltage = 6;
  if (has_power_charger_connector_rated_output_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->power_charger_connector_rated_output_voltage(), output);
  }

  // optional float power_charger_connector_rated_output_power = 7;
  if (has_power_charger_connector_rated_output_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->power_charger_connector_rated_output_power(), output);
  }

  // optional float realtime_output_voltage = 8;
  if (has_realtime_output_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->realtime_output_voltage(), output);
  }

  // optional float realtime_output_current = 9;
  if (has_realtime_output_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->realtime_output_current(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargingConnector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string charging_connector_id = 1;
  if (has_charging_connector_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charging_connector_id().data(), this->charging_connector_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->charging_connector_id(), target);
  }

  // optional .ChargingConnectorWorkState charging_connector_work_state = 2;
  if (has_charging_connector_work_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->charging_connector_work_state(), target);
  }

  // optional .ChargingConnectorConnectionState charging_connector_connection_state = 3;
  if (has_charging_connector_connection_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->charging_connector_connection_state(), target);
  }

  // optional .ChargingConnectorFaultState charging_connector_fault_state = 4;
  if (has_charging_connector_fault_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->charging_connector_fault_state(), target);
  }

  // optional .PowerChargerConnectorOutputType power_charger_connector_output_type = 5;
  if (has_power_charger_connector_output_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->power_charger_connector_output_type(), target);
  }

  // optional .PowerChargerConnectorOutputVoltage power_charger_connector_rated_output_voltage = 6;
  if (has_power_charger_connector_rated_output_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->power_charger_connector_rated_output_voltage(), target);
  }

  // optional float power_charger_connector_rated_output_power = 7;
  if (has_power_charger_connector_rated_output_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->power_charger_connector_rated_output_power(), target);
  }

  // optional float realtime_output_voltage = 8;
  if (has_realtime_output_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->realtime_output_voltage(), target);
  }

  // optional float realtime_output_current = 9;
  if (has_realtime_output_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->realtime_output_current(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargingConnector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charging_connector_id = 1;
    if (has_charging_connector_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charging_connector_id());
    }

    // optional .ChargingConnectorWorkState charging_connector_work_state = 2;
    if (has_charging_connector_work_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charging_connector_work_state());
    }

    // optional .ChargingConnectorConnectionState charging_connector_connection_state = 3;
    if (has_charging_connector_connection_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charging_connector_connection_state());
    }

    // optional .ChargingConnectorFaultState charging_connector_fault_state = 4;
    if (has_charging_connector_fault_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charging_connector_fault_state());
    }

    // optional .PowerChargerConnectorOutputType power_charger_connector_output_type = 5;
    if (has_power_charger_connector_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_charger_connector_output_type());
    }

    // optional .PowerChargerConnectorOutputVoltage power_charger_connector_rated_output_voltage = 6;
    if (has_power_charger_connector_rated_output_voltage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_charger_connector_rated_output_voltage());
    }

    // optional float power_charger_connector_rated_output_power = 7;
    if (has_power_charger_connector_rated_output_power()) {
      total_size += 1 + 4;
    }

    // optional float realtime_output_voltage = 8;
    if (has_realtime_output_voltage()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float realtime_output_current = 9;
    if (has_realtime_output_current()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargingConnector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargingConnector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargingConnector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargingConnector::MergeFrom(const ChargingConnector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charging_connector_id()) {
      set_charging_connector_id(from.charging_connector_id());
    }
    if (from.has_charging_connector_work_state()) {
      set_charging_connector_work_state(from.charging_connector_work_state());
    }
    if (from.has_charging_connector_connection_state()) {
      set_charging_connector_connection_state(from.charging_connector_connection_state());
    }
    if (from.has_charging_connector_fault_state()) {
      set_charging_connector_fault_state(from.charging_connector_fault_state());
    }
    if (from.has_power_charger_connector_output_type()) {
      set_power_charger_connector_output_type(from.power_charger_connector_output_type());
    }
    if (from.has_power_charger_connector_rated_output_voltage()) {
      set_power_charger_connector_rated_output_voltage(from.power_charger_connector_rated_output_voltage());
    }
    if (from.has_power_charger_connector_rated_output_power()) {
      set_power_charger_connector_rated_output_power(from.power_charger_connector_rated_output_power());
    }
    if (from.has_realtime_output_voltage()) {
      set_realtime_output_voltage(from.realtime_output_voltage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_realtime_output_current()) {
      set_realtime_output_current(from.realtime_output_current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargingConnector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargingConnector::CopyFrom(const ChargingConnector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargingConnector::IsInitialized() const {

  return true;
}

void ChargingConnector::Swap(ChargingConnector* other) {
  if (other != this) {
    std::swap(charging_connector_id_, other->charging_connector_id_);
    std::swap(charging_connector_work_state_, other->charging_connector_work_state_);
    std::swap(charging_connector_connection_state_, other->charging_connector_connection_state_);
    std::swap(charging_connector_fault_state_, other->charging_connector_fault_state_);
    std::swap(power_charger_connector_output_type_, other->power_charger_connector_output_type_);
    std::swap(power_charger_connector_rated_output_voltage_, other->power_charger_connector_rated_output_voltage_);
    std::swap(power_charger_connector_rated_output_power_, other->power_charger_connector_rated_output_power_);
    std::swap(realtime_output_voltage_, other->realtime_output_voltage_);
    std::swap(realtime_output_current_, other->realtime_output_current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargingConnector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargingConnector_descriptor_;
  metadata.reflection = ChargingConnector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Alarm::kAlarmTypeIdFieldNumber;
const int Alarm::kAlarmTimestampFieldNumber;
const int Alarm::kAlarmStateFieldNumber;
#endif  // !_MSC_VER

Alarm::Alarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Alarm::InitAsDefaultInstance() {
}

Alarm::Alarm(const Alarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Alarm::SharedCtor() {
  _cached_size_ = 0;
  alarm_type_id_ = 0u;
  alarm_timestamp_ = GOOGLE_LONGLONG(0);
  alarm_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alarm::~Alarm() {
  SharedDtor();
}

void Alarm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Alarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alarm_descriptor_;
}

const Alarm& Alarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

Alarm* Alarm::default_instance_ = NULL;

Alarm* Alarm::New() const {
  return new Alarm;
}

void Alarm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alarm_type_id_ = 0u;
    alarm_timestamp_ = GOOGLE_LONGLONG(0);
    alarm_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 alarm_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarm_type_id_)));
          set_has_alarm_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alarm_timestamp;
        break;
      }

      // optional int64 alarm_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarm_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alarm_timestamp_)));
          set_has_alarm_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alarm_state;
        break;
      }

      // optional .AlarmState alarm_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarm_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AlarmState_IsValid(value)) {
            set_alarm_state(static_cast< ::AlarmState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 alarm_type_id = 1;
  if (has_alarm_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->alarm_type_id(), output);
  }

  // optional int64 alarm_timestamp = 2;
  if (has_alarm_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->alarm_timestamp(), output);
  }

  // optional .AlarmState alarm_state = 3;
  if (has_alarm_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->alarm_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Alarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 alarm_type_id = 1;
  if (has_alarm_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->alarm_type_id(), target);
  }

  // optional int64 alarm_timestamp = 2;
  if (has_alarm_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->alarm_timestamp(), target);
  }

  // optional .AlarmState alarm_state = 3;
  if (has_alarm_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->alarm_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Alarm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 alarm_type_id = 1;
    if (has_alarm_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarm_type_id());
    }

    // optional int64 alarm_timestamp = 2;
    if (has_alarm_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->alarm_timestamp());
    }

    // optional .AlarmState alarm_state = 3;
    if (has_alarm_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alarm_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alarm::MergeFrom(const Alarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarm_type_id()) {
      set_alarm_type_id(from.alarm_type_id());
    }
    if (from.has_alarm_timestamp()) {
      set_alarm_timestamp(from.alarm_timestamp());
    }
    if (from.has_alarm_state()) {
      set_alarm_state(from.alarm_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alarm::CopyFrom(const Alarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alarm::IsInitialized() const {

  return true;
}

void Alarm::Swap(Alarm* other) {
  if (other != this) {
    std::swap(alarm_type_id_, other->alarm_type_id_);
    std::swap(alarm_timestamp_, other->alarm_timestamp_);
    std::swap(alarm_state_, other->alarm_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alarm_descriptor_;
  metadata.reflection = Alarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalConfiguration::kFullFieldNumber;
const int LocalConfiguration::kConfigurationInfoFieldNumber;
#endif  // !_MSC_VER

LocalConfiguration::LocalConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalConfiguration::InitAsDefaultInstance() {
}

LocalConfiguration::LocalConfiguration(const LocalConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalConfiguration::SharedCtor() {
  _cached_size_ = 0;
  full_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalConfiguration::~LocalConfiguration() {
  SharedDtor();
}

void LocalConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocalConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalConfiguration_descriptor_;
}

const LocalConfiguration& LocalConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

LocalConfiguration* LocalConfiguration::default_instance_ = NULL;

LocalConfiguration* LocalConfiguration::New() const {
  return new LocalConfiguration;
}

void LocalConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    full_ = false;
  }
  configuration_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool full = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_)));
          set_has_full();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configuration_info;
        break;
      }

      // repeated .LocalConfigurationInfo configuration_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configuration_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configuration_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool full = 1;
  if (has_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->full(), output);
  }

  // repeated .LocalConfigurationInfo configuration_info = 2;
  for (int i = 0; i < this->configuration_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->configuration_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool full = 1;
  if (has_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->full(), target);
  }

  // repeated .LocalConfigurationInfo configuration_info = 2;
  for (int i = 0; i < this->configuration_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->configuration_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool full = 1;
    if (has_full()) {
      total_size += 1 + 1;
    }

  }
  // repeated .LocalConfigurationInfo configuration_info = 2;
  total_size += 1 * this->configuration_info_size();
  for (int i = 0; i < this->configuration_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configuration_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalConfiguration::MergeFrom(const LocalConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  configuration_info_.MergeFrom(from.configuration_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_full()) {
      set_full(from.full());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalConfiguration::CopyFrom(const LocalConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalConfiguration::IsInitialized() const {

  return true;
}

void LocalConfiguration::Swap(LocalConfiguration* other) {
  if (other != this) {
    std::swap(full_, other->full_);
    configuration_info_.Swap(&other->configuration_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalConfiguration_descriptor_;
  metadata.reflection = LocalConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalConfigurationInfo::kConfigurationKeyFieldNumber;
const int LocalConfigurationInfo::kConfigurationValueFieldNumber;
const int LocalConfigurationInfo::kLocalConfigurationInfoAccessTypeFieldNumber;
const int LocalConfigurationInfo::kHasBeenUpdatedFieldNumber;
const int LocalConfigurationInfo::kFailureReasonFieldNumber;
#endif  // !_MSC_VER

LocalConfigurationInfo::LocalConfigurationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalConfigurationInfo::InitAsDefaultInstance() {
}

LocalConfigurationInfo::LocalConfigurationInfo(const LocalConfigurationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalConfigurationInfo::SharedCtor() {
  _cached_size_ = 0;
  configuration_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configuration_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_configuration_info_access_type_ = 0;
  has_been_updated_ = false;
  failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalConfigurationInfo::~LocalConfigurationInfo() {
  SharedDtor();
}

void LocalConfigurationInfo::SharedDtor() {
  if (configuration_key_ != &::google::protobuf::internal::kEmptyString) {
    delete configuration_key_;
  }
  if (configuration_value_ != &::google::protobuf::internal::kEmptyString) {
    delete configuration_value_;
  }
  if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
    delete failurereason_;
  }
  if (this != default_instance_) {
  }
}

void LocalConfigurationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalConfigurationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalConfigurationInfo_descriptor_;
}

const LocalConfigurationInfo& LocalConfigurationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

LocalConfigurationInfo* LocalConfigurationInfo::default_instance_ = NULL;

LocalConfigurationInfo* LocalConfigurationInfo::New() const {
  return new LocalConfigurationInfo;
}

void LocalConfigurationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_configuration_key()) {
      if (configuration_key_ != &::google::protobuf::internal::kEmptyString) {
        configuration_key_->clear();
      }
    }
    if (has_configuration_value()) {
      if (configuration_value_ != &::google::protobuf::internal::kEmptyString) {
        configuration_value_->clear();
      }
    }
    local_configuration_info_access_type_ = 0;
    has_been_updated_ = false;
    if (has_failurereason()) {
      if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
        failurereason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalConfigurationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string configuration_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configuration_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configuration_key().data(), this->configuration_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configuration_value;
        break;
      }

      // optional bytes configuration_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_configuration_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_local_configuration_info_access_type;
        break;
      }

      // optional .LocalConfigurationInfoAccessType local_configuration_info_access_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_configuration_info_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LocalConfigurationInfoAccessType_IsValid(value)) {
            set_local_configuration_info_access_type(static_cast< ::LocalConfigurationInfoAccessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_has_been_updated;
        break;
      }

      // optional bool has_been_updated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_been_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_been_updated_)));
          set_has_has_been_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_failureReason;
        break;
      }

      // optional string failureReason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failureReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failurereason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failurereason().data(), this->failurereason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalConfigurationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string configuration_key = 1;
  if (has_configuration_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configuration_key().data(), this->configuration_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->configuration_key(), output);
  }

  // optional bytes configuration_value = 2;
  if (has_configuration_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->configuration_value(), output);
  }

  // optional .LocalConfigurationInfoAccessType local_configuration_info_access_type = 3;
  if (has_local_configuration_info_access_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->local_configuration_info_access_type(), output);
  }

  // optional bool has_been_updated = 4;
  if (has_has_been_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_been_updated(), output);
  }

  // optional string failureReason = 5;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->failurereason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalConfigurationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string configuration_key = 1;
  if (has_configuration_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configuration_key().data(), this->configuration_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->configuration_key(), target);
  }

  // optional bytes configuration_value = 2;
  if (has_configuration_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->configuration_value(), target);
  }

  // optional .LocalConfigurationInfoAccessType local_configuration_info_access_type = 3;
  if (has_local_configuration_info_access_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->local_configuration_info_access_type(), target);
  }

  // optional bool has_been_updated = 4;
  if (has_has_been_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_been_updated(), target);
  }

  // optional string failureReason = 5;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->failurereason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalConfigurationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string configuration_key = 1;
    if (has_configuration_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configuration_key());
    }

    // optional bytes configuration_value = 2;
    if (has_configuration_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->configuration_value());
    }

    // optional .LocalConfigurationInfoAccessType local_configuration_info_access_type = 3;
    if (has_local_configuration_info_access_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_configuration_info_access_type());
    }

    // optional bool has_been_updated = 4;
    if (has_has_been_updated()) {
      total_size += 1 + 1;
    }

    // optional string failureReason = 5;
    if (has_failurereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failurereason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalConfigurationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalConfigurationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalConfigurationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalConfigurationInfo::MergeFrom(const LocalConfigurationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configuration_key()) {
      set_configuration_key(from.configuration_key());
    }
    if (from.has_configuration_value()) {
      set_configuration_value(from.configuration_value());
    }
    if (from.has_local_configuration_info_access_type()) {
      set_local_configuration_info_access_type(from.local_configuration_info_access_type());
    }
    if (from.has_has_been_updated()) {
      set_has_been_updated(from.has_been_updated());
    }
    if (from.has_failurereason()) {
      set_failurereason(from.failurereason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalConfigurationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalConfigurationInfo::CopyFrom(const LocalConfigurationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalConfigurationInfo::IsInitialized() const {

  return true;
}

void LocalConfigurationInfo::Swap(LocalConfigurationInfo* other) {
  if (other != this) {
    std::swap(configuration_key_, other->configuration_key_);
    std::swap(configuration_value_, other->configuration_value_);
    std::swap(local_configuration_info_access_type_, other->local_configuration_info_access_type_);
    std::swap(has_been_updated_, other->has_been_updated_);
    std::swap(failurereason_, other->failurereason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalConfigurationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalConfigurationInfo_descriptor_;
  metadata.reflection = LocalConfigurationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteOperation::kMessageTimestampFieldNumber;
const int RemoteOperation::kRemoteConfigurationFieldNumber;
const int RemoteOperation::kRemoteControlFieldNumber;
const int RemoteOperation::kRemoteUpgradeFieldNumber;
#endif  // !_MSC_VER

RemoteOperation::RemoteOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteOperation::InitAsDefaultInstance() {
  remote_configuration_ = const_cast< ::RemoteConfiguration*>(&::RemoteConfiguration::default_instance());
  remote_control_ = const_cast< ::RemoteControl*>(&::RemoteControl::default_instance());
  remote_upgrade_ = const_cast< ::RemoteUpgrade*>(&::RemoteUpgrade::default_instance());
}

RemoteOperation::RemoteOperation(const RemoteOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteOperation::SharedCtor() {
  _cached_size_ = 0;
  message_timestamp_ = GOOGLE_LONGLONG(0);
  remote_configuration_ = NULL;
  remote_control_ = NULL;
  remote_upgrade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteOperation::~RemoteOperation() {
  SharedDtor();
}

void RemoteOperation::SharedDtor() {
  if (this != default_instance_) {
    delete remote_configuration_;
    delete remote_control_;
    delete remote_upgrade_;
  }
}

void RemoteOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteOperation_descriptor_;
}

const RemoteOperation& RemoteOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteOperation* RemoteOperation::default_instance_ = NULL;

RemoteOperation* RemoteOperation::New() const {
  return new RemoteOperation;
}

void RemoteOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_timestamp_ = GOOGLE_LONGLONG(0);
    if (has_remote_configuration()) {
      if (remote_configuration_ != NULL) remote_configuration_->::RemoteConfiguration::Clear();
    }
    if (has_remote_control()) {
      if (remote_control_ != NULL) remote_control_->::RemoteControl::Clear();
    }
    if (has_remote_upgrade()) {
      if (remote_upgrade_ != NULL) remote_upgrade_->::RemoteUpgrade::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 message_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_timestamp_)));
          set_has_message_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remote_configuration;
        break;
      }

      // optional .RemoteConfiguration remote_configuration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remote_control;
        break;
      }

      // optional .RemoteControl remote_control = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remote_upgrade;
        break;
      }

      // optional .RemoteUpgrade remote_upgrade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_upgrade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 message_timestamp = 1;
  if (has_message_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_timestamp(), output);
  }

  // optional .RemoteConfiguration remote_configuration = 2;
  if (has_remote_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->remote_configuration(), output);
  }

  // optional .RemoteControl remote_control = 3;
  if (has_remote_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remote_control(), output);
  }

  // optional .RemoteUpgrade remote_upgrade = 4;
  if (has_remote_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->remote_upgrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 message_timestamp = 1;
  if (has_message_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_timestamp(), target);
  }

  // optional .RemoteConfiguration remote_configuration = 2;
  if (has_remote_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->remote_configuration(), target);
  }

  // optional .RemoteControl remote_control = 3;
  if (has_remote_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remote_control(), target);
  }

  // optional .RemoteUpgrade remote_upgrade = 4;
  if (has_remote_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->remote_upgrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 message_timestamp = 1;
    if (has_message_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->message_timestamp());
    }

    // optional .RemoteConfiguration remote_configuration = 2;
    if (has_remote_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_configuration());
    }

    // optional .RemoteControl remote_control = 3;
    if (has_remote_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_control());
    }

    // optional .RemoteUpgrade remote_upgrade = 4;
    if (has_remote_upgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_upgrade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteOperation::MergeFrom(const RemoteOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_timestamp()) {
      set_message_timestamp(from.message_timestamp());
    }
    if (from.has_remote_configuration()) {
      mutable_remote_configuration()->::RemoteConfiguration::MergeFrom(from.remote_configuration());
    }
    if (from.has_remote_control()) {
      mutable_remote_control()->::RemoteControl::MergeFrom(from.remote_control());
    }
    if (from.has_remote_upgrade()) {
      mutable_remote_upgrade()->::RemoteUpgrade::MergeFrom(from.remote_upgrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteOperation::CopyFrom(const RemoteOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteOperation::IsInitialized() const {

  return true;
}

void RemoteOperation::Swap(RemoteOperation* other) {
  if (other != this) {
    std::swap(message_timestamp_, other->message_timestamp_);
    std::swap(remote_configuration_, other->remote_configuration_);
    std::swap(remote_control_, other->remote_control_);
    std::swap(remote_upgrade_, other->remote_upgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteOperation_descriptor_;
  metadata.reflection = RemoteOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteConfiguration::kRequestIdFieldNumber;
const int RemoteConfiguration::kRemoteConfigurationInfoFieldNumber;
#endif  // !_MSC_VER

RemoteConfiguration::RemoteConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteConfiguration::InitAsDefaultInstance() {
}

RemoteConfiguration::RemoteConfiguration(const RemoteConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteConfiguration::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteConfiguration::~RemoteConfiguration() {
  SharedDtor();
}

void RemoteConfiguration::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (this != default_instance_) {
  }
}

void RemoteConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteConfiguration_descriptor_;
}

const RemoteConfiguration& RemoteConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteConfiguration* RemoteConfiguration::default_instance_ = NULL;

RemoteConfiguration* RemoteConfiguration::New() const {
  return new RemoteConfiguration;
}

void RemoteConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
  }
  remote_configuration_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remote_configuration_info;
        break;
      }

      // repeated .RemoteConfigurationInfo remote_configuration_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_configuration_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remote_configuration_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remote_configuration_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // repeated .RemoteConfigurationInfo remote_configuration_info = 2;
  for (int i = 0; i < this->remote_configuration_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->remote_configuration_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // repeated .RemoteConfigurationInfo remote_configuration_info = 2;
  for (int i = 0; i < this->remote_configuration_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->remote_configuration_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

  }
  // repeated .RemoteConfigurationInfo remote_configuration_info = 2;
  total_size += 1 * this->remote_configuration_info_size();
  for (int i = 0; i < this->remote_configuration_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remote_configuration_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteConfiguration::MergeFrom(const RemoteConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  remote_configuration_info_.MergeFrom(from.remote_configuration_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteConfiguration::CopyFrom(const RemoteConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteConfiguration::IsInitialized() const {

  return true;
}

void RemoteConfiguration::Swap(RemoteConfiguration* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    remote_configuration_info_.Swap(&other->remote_configuration_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteConfiguration_descriptor_;
  metadata.reflection = RemoteConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteConfigurationInfo::kConfigurationKeyFieldNumber;
const int RemoteConfigurationInfo::kConfigurationValueFieldNumber;
#endif  // !_MSC_VER

RemoteConfigurationInfo::RemoteConfigurationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteConfigurationInfo::InitAsDefaultInstance() {
}

RemoteConfigurationInfo::RemoteConfigurationInfo(const RemoteConfigurationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteConfigurationInfo::SharedCtor() {
  _cached_size_ = 0;
  configuration_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configuration_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteConfigurationInfo::~RemoteConfigurationInfo() {
  SharedDtor();
}

void RemoteConfigurationInfo::SharedDtor() {
  if (configuration_key_ != &::google::protobuf::internal::kEmptyString) {
    delete configuration_key_;
  }
  if (configuration_value_ != &::google::protobuf::internal::kEmptyString) {
    delete configuration_value_;
  }
  if (this != default_instance_) {
  }
}

void RemoteConfigurationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteConfigurationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteConfigurationInfo_descriptor_;
}

const RemoteConfigurationInfo& RemoteConfigurationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteConfigurationInfo* RemoteConfigurationInfo::default_instance_ = NULL;

RemoteConfigurationInfo* RemoteConfigurationInfo::New() const {
  return new RemoteConfigurationInfo;
}

void RemoteConfigurationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_configuration_key()) {
      if (configuration_key_ != &::google::protobuf::internal::kEmptyString) {
        configuration_key_->clear();
      }
    }
    if (has_configuration_value()) {
      if (configuration_value_ != &::google::protobuf::internal::kEmptyString) {
        configuration_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteConfigurationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string configuration_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configuration_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configuration_key().data(), this->configuration_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configuration_value;
        break;
      }

      // optional bytes configuration_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_configuration_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteConfigurationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string configuration_key = 1;
  if (has_configuration_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configuration_key().data(), this->configuration_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->configuration_key(), output);
  }

  // optional bytes configuration_value = 2;
  if (has_configuration_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->configuration_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteConfigurationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string configuration_key = 1;
  if (has_configuration_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configuration_key().data(), this->configuration_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->configuration_key(), target);
  }

  // optional bytes configuration_value = 2;
  if (has_configuration_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->configuration_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteConfigurationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string configuration_key = 1;
    if (has_configuration_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configuration_key());
    }

    // optional bytes configuration_value = 2;
    if (has_configuration_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->configuration_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteConfigurationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteConfigurationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteConfigurationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteConfigurationInfo::MergeFrom(const RemoteConfigurationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configuration_key()) {
      set_configuration_key(from.configuration_key());
    }
    if (from.has_configuration_value()) {
      set_configuration_value(from.configuration_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteConfigurationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteConfigurationInfo::CopyFrom(const RemoteConfigurationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteConfigurationInfo::IsInitialized() const {

  return true;
}

void RemoteConfigurationInfo::Swap(RemoteConfigurationInfo* other) {
  if (other != this) {
    std::swap(configuration_key_, other->configuration_key_);
    std::swap(configuration_value_, other->configuration_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteConfigurationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteConfigurationInfo_descriptor_;
  metadata.reflection = RemoteConfigurationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteControl::kRequestIdFieldNumber;
const int RemoteControl::kRemoteControlCommandFieldNumber;
const int RemoteControl::kRemoteControlParamFieldNumber;
#endif  // !_MSC_VER

RemoteControl::RemoteControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteControl::InitAsDefaultInstance() {
}

RemoteControl::RemoteControl(const RemoteControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteControl::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remote_control_command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteControl::~RemoteControl() {
  SharedDtor();
}

void RemoteControl::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (this != default_instance_) {
  }
}

void RemoteControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteControl_descriptor_;
}

const RemoteControl& RemoteControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteControl* RemoteControl::default_instance_ = NULL;

RemoteControl* RemoteControl::New() const {
  return new RemoteControl;
}

void RemoteControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    remote_control_command_ = 0;
  }
  remote_control_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remote_control_command;
        break;
      }

      // optional .RemoteControlCommand remote_control_command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_control_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemoteControlCommand_IsValid(value)) {
            set_remote_control_command(static_cast< ::RemoteControlCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remote_control_param;
        break;
      }

      // repeated .RemoteControlParam remote_control_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_control_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remote_control_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remote_control_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // optional .RemoteControlCommand remote_control_command = 2;
  if (has_remote_control_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->remote_control_command(), output);
  }

  // repeated .RemoteControlParam remote_control_param = 3;
  for (int i = 0; i < this->remote_control_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remote_control_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .RemoteControlCommand remote_control_command = 2;
  if (has_remote_control_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->remote_control_command(), target);
  }

  // repeated .RemoteControlParam remote_control_param = 3;
  for (int i = 0; i < this->remote_control_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remote_control_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional .RemoteControlCommand remote_control_command = 2;
    if (has_remote_control_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->remote_control_command());
    }

  }
  // repeated .RemoteControlParam remote_control_param = 3;
  total_size += 1 * this->remote_control_param_size();
  for (int i = 0; i < this->remote_control_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remote_control_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteControl::MergeFrom(const RemoteControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  remote_control_param_.MergeFrom(from.remote_control_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_remote_control_command()) {
      set_remote_control_command(from.remote_control_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControl::CopyFrom(const RemoteControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControl::IsInitialized() const {

  return true;
}

void RemoteControl::Swap(RemoteControl* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(remote_control_command_, other->remote_control_command_);
    remote_control_param_.Swap(&other->remote_control_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteControl_descriptor_;
  metadata.reflection = RemoteControl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteControlParam::kKeyFieldNumber;
const int RemoteControlParam::kValueFieldNumber;
#endif  // !_MSC_VER

RemoteControlParam::RemoteControlParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteControlParam::InitAsDefaultInstance() {
}

RemoteControlParam::RemoteControlParam(const RemoteControlParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteControlParam::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteControlParam::~RemoteControlParam() {
  SharedDtor();
}

void RemoteControlParam::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RemoteControlParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteControlParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteControlParam_descriptor_;
}

const RemoteControlParam& RemoteControlParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteControlParam* RemoteControlParam::default_instance_ = NULL;

RemoteControlParam* RemoteControlParam::New() const {
  return new RemoteControlParam;
}

void RemoteControlParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteControlParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteControlParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteControlParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteControlParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteControlParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteControlParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteControlParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteControlParam::MergeFrom(const RemoteControlParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteControlParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlParam::CopyFrom(const RemoteControlParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlParam::IsInitialized() const {

  return true;
}

void RemoteControlParam::Swap(RemoteControlParam* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteControlParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteControlParam_descriptor_;
  metadata.reflection = RemoteControlParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteUpgrade::kRequestIdFieldNumber;
const int RemoteUpgrade::kSoftwareVersionFieldNumber;
const int RemoteUpgrade::kFtpAddressFieldNumber;
#endif  // !_MSC_VER

RemoteUpgrade::RemoteUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteUpgrade::InitAsDefaultInstance() {
}

RemoteUpgrade::RemoteUpgrade(const RemoteUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteUpgrade::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ftp_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteUpgrade::~RemoteUpgrade() {
  SharedDtor();
}

void RemoteUpgrade::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (software_version_ != &::google::protobuf::internal::kEmptyString) {
    delete software_version_;
  }
  if (ftp_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ftp_address_;
  }
  if (this != default_instance_) {
  }
}

void RemoteUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteUpgrade_descriptor_;
}

const RemoteUpgrade& RemoteUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteUpgrade* RemoteUpgrade::default_instance_ = NULL;

RemoteUpgrade* RemoteUpgrade::New() const {
  return new RemoteUpgrade;
}

void RemoteUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_software_version()) {
      if (software_version_ != &::google::protobuf::internal::kEmptyString) {
        software_version_->clear();
      }
    }
    if (has_ftp_address()) {
      if (ftp_address_ != &::google::protobuf::internal::kEmptyString) {
        ftp_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_software_version;
        break;
      }

      // optional string software_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_software_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->software_version().data(), this->software_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ftp_address;
        break;
      }

      // optional string ftp_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ftp_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ftp_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ftp_address().data(), this->ftp_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // optional string software_version = 2;
  if (has_software_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software_version().data(), this->software_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->software_version(), output);
  }

  // optional string ftp_address = 3;
  if (has_ftp_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ftp_address().data(), this->ftp_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ftp_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string software_version = 2;
  if (has_software_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software_version().data(), this->software_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->software_version(), target);
  }

  // optional string ftp_address = 3;
  if (has_ftp_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ftp_address().data(), this->ftp_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ftp_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string software_version = 2;
    if (has_software_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software_version());
    }

    // optional string ftp_address = 3;
    if (has_ftp_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ftp_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteUpgrade::MergeFrom(const RemoteUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_software_version()) {
      set_software_version(from.software_version());
    }
    if (from.has_ftp_address()) {
      set_ftp_address(from.ftp_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteUpgrade::CopyFrom(const RemoteUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteUpgrade::IsInitialized() const {

  return true;
}

void RemoteUpgrade::Swap(RemoteUpgrade* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(software_version_, other->software_version_);
    std::swap(ftp_address_, other->ftp_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteUpgrade_descriptor_;
  metadata.reflection = RemoteUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteOperationResponse::kRemoteConfigurationResponseFieldNumber;
const int RemoteOperationResponse::kRemoteControlResponseFieldNumber;
const int RemoteOperationResponse::kRemoteUpgradeResponseFieldNumber;
#endif  // !_MSC_VER

RemoteOperationResponse::RemoteOperationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteOperationResponse::InitAsDefaultInstance() {
  remote_configuration_response_ = const_cast< ::RemoteConfigurationResponse*>(&::RemoteConfigurationResponse::default_instance());
  remote_control_response_ = const_cast< ::RemoteControlResponse*>(&::RemoteControlResponse::default_instance());
  remote_upgrade_response_ = const_cast< ::RemoteUpgradeResponse*>(&::RemoteUpgradeResponse::default_instance());
}

RemoteOperationResponse::RemoteOperationResponse(const RemoteOperationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteOperationResponse::SharedCtor() {
  _cached_size_ = 0;
  remote_configuration_response_ = NULL;
  remote_control_response_ = NULL;
  remote_upgrade_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteOperationResponse::~RemoteOperationResponse() {
  SharedDtor();
}

void RemoteOperationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete remote_configuration_response_;
    delete remote_control_response_;
    delete remote_upgrade_response_;
  }
}

void RemoteOperationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteOperationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteOperationResponse_descriptor_;
}

const RemoteOperationResponse& RemoteOperationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteOperationResponse* RemoteOperationResponse::default_instance_ = NULL;

RemoteOperationResponse* RemoteOperationResponse::New() const {
  return new RemoteOperationResponse;
}

void RemoteOperationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_remote_configuration_response()) {
      if (remote_configuration_response_ != NULL) remote_configuration_response_->::RemoteConfigurationResponse::Clear();
    }
    if (has_remote_control_response()) {
      if (remote_control_response_ != NULL) remote_control_response_->::RemoteControlResponse::Clear();
    }
    if (has_remote_upgrade_response()) {
      if (remote_upgrade_response_ != NULL) remote_upgrade_response_->::RemoteUpgradeResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteOperationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemoteConfigurationResponse remote_configuration_response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_configuration_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remote_control_response;
        break;
      }

      // optional .RemoteControlResponse remote_control_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_control_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_control_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remote_upgrade_response;
        break;
      }

      // optional .RemoteUpgradeResponse remote_upgrade_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_upgrade_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_upgrade_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteOperationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RemoteConfigurationResponse remote_configuration_response = 1;
  if (has_remote_configuration_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->remote_configuration_response(), output);
  }

  // optional .RemoteControlResponse remote_control_response = 2;
  if (has_remote_control_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->remote_control_response(), output);
  }

  // optional .RemoteUpgradeResponse remote_upgrade_response = 3;
  if (has_remote_upgrade_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remote_upgrade_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteOperationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RemoteConfigurationResponse remote_configuration_response = 1;
  if (has_remote_configuration_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->remote_configuration_response(), target);
  }

  // optional .RemoteControlResponse remote_control_response = 2;
  if (has_remote_control_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->remote_control_response(), target);
  }

  // optional .RemoteUpgradeResponse remote_upgrade_response = 3;
  if (has_remote_upgrade_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remote_upgrade_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteOperationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RemoteConfigurationResponse remote_configuration_response = 1;
    if (has_remote_configuration_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_configuration_response());
    }

    // optional .RemoteControlResponse remote_control_response = 2;
    if (has_remote_control_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_control_response());
    }

    // optional .RemoteUpgradeResponse remote_upgrade_response = 3;
    if (has_remote_upgrade_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_upgrade_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteOperationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteOperationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteOperationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteOperationResponse::MergeFrom(const RemoteOperationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remote_configuration_response()) {
      mutable_remote_configuration_response()->::RemoteConfigurationResponse::MergeFrom(from.remote_configuration_response());
    }
    if (from.has_remote_control_response()) {
      mutable_remote_control_response()->::RemoteControlResponse::MergeFrom(from.remote_control_response());
    }
    if (from.has_remote_upgrade_response()) {
      mutable_remote_upgrade_response()->::RemoteUpgradeResponse::MergeFrom(from.remote_upgrade_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteOperationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteOperationResponse::CopyFrom(const RemoteOperationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteOperationResponse::IsInitialized() const {

  return true;
}

void RemoteOperationResponse::Swap(RemoteOperationResponse* other) {
  if (other != this) {
    std::swap(remote_configuration_response_, other->remote_configuration_response_);
    std::swap(remote_control_response_, other->remote_control_response_);
    std::swap(remote_upgrade_response_, other->remote_upgrade_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteOperationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteOperationResponse_descriptor_;
  metadata.reflection = RemoteOperationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteConfigurationResponse::kRequestIdFieldNumber;
const int RemoteConfigurationResponse::kDeviceIdFieldNumber;
const int RemoteConfigurationResponse::kRemoteConfigurationResponseTypeFieldNumber;
const int RemoteConfigurationResponse::kFailureReasonFieldNumber;
const int RemoteConfigurationResponse::kConfigurationInfoFieldNumber;
#endif  // !_MSC_VER

RemoteConfigurationResponse::RemoteConfigurationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteConfigurationResponse::InitAsDefaultInstance() {
}

RemoteConfigurationResponse::RemoteConfigurationResponse(const RemoteConfigurationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteConfigurationResponse::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remote_configuration_response_type_ = 0;
  failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteConfigurationResponse::~RemoteConfigurationResponse() {
  SharedDtor();
}

void RemoteConfigurationResponse::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
    delete failurereason_;
  }
  if (this != default_instance_) {
  }
}

void RemoteConfigurationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteConfigurationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteConfigurationResponse_descriptor_;
}

const RemoteConfigurationResponse& RemoteConfigurationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteConfigurationResponse* RemoteConfigurationResponse::default_instance_ = NULL;

RemoteConfigurationResponse* RemoteConfigurationResponse::New() const {
  return new RemoteConfigurationResponse;
}

void RemoteConfigurationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    remote_configuration_response_type_ = 0;
    if (has_failurereason()) {
      if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
        failurereason_->clear();
      }
    }
  }
  configuration_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteConfigurationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_id;
        break;
      }

      // optional string device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remote_configuration_response_type;
        break;
      }

      // optional .RemoteConfigurationResponseType remote_configuration_response_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_configuration_response_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemoteConfigurationResponseType_IsValid(value)) {
            set_remote_configuration_response_type(static_cast< ::RemoteConfigurationResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_failureReason;
        break;
      }

      // optional string failureReason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failureReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failurereason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failurereason().data(), this->failurereason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_configuration_info;
        break;
      }

      // repeated .LocalConfigurationInfo configuration_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configuration_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_configuration_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteConfigurationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_id(), output);
  }

  // optional .RemoteConfigurationResponseType remote_configuration_response_type = 3;
  if (has_remote_configuration_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->remote_configuration_response_type(), output);
  }

  // optional string failureReason = 4;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->failurereason(), output);
  }

  // repeated .LocalConfigurationInfo configuration_info = 5;
  for (int i = 0; i < this->configuration_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->configuration_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteConfigurationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_id(), target);
  }

  // optional .RemoteConfigurationResponseType remote_configuration_response_type = 3;
  if (has_remote_configuration_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->remote_configuration_response_type(), target);
  }

  // optional string failureReason = 4;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failurereason(), target);
  }

  // repeated .LocalConfigurationInfo configuration_info = 5;
  for (int i = 0; i < this->configuration_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->configuration_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteConfigurationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional .RemoteConfigurationResponseType remote_configuration_response_type = 3;
    if (has_remote_configuration_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->remote_configuration_response_type());
    }

    // optional string failureReason = 4;
    if (has_failurereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failurereason());
    }

  }
  // repeated .LocalConfigurationInfo configuration_info = 5;
  total_size += 1 * this->configuration_info_size();
  for (int i = 0; i < this->configuration_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configuration_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteConfigurationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteConfigurationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteConfigurationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteConfigurationResponse::MergeFrom(const RemoteConfigurationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  configuration_info_.MergeFrom(from.configuration_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_remote_configuration_response_type()) {
      set_remote_configuration_response_type(from.remote_configuration_response_type());
    }
    if (from.has_failurereason()) {
      set_failurereason(from.failurereason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteConfigurationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteConfigurationResponse::CopyFrom(const RemoteConfigurationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteConfigurationResponse::IsInitialized() const {

  return true;
}

void RemoteConfigurationResponse::Swap(RemoteConfigurationResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(remote_configuration_response_type_, other->remote_configuration_response_type_);
    std::swap(failurereason_, other->failurereason_);
    configuration_info_.Swap(&other->configuration_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteConfigurationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteConfigurationResponse_descriptor_;
  metadata.reflection = RemoteConfigurationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteControlResponse::kRequestIdFieldNumber;
const int RemoteControlResponse::kDeviceIdFieldNumber;
const int RemoteControlResponse::kRemoteControlResponseTypeFieldNumber;
const int RemoteControlResponse::kFailureReasonFieldNumber;
#endif  // !_MSC_VER

RemoteControlResponse::RemoteControlResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteControlResponse::InitAsDefaultInstance() {
}

RemoteControlResponse::RemoteControlResponse(const RemoteControlResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteControlResponse::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remote_control_response_type_ = 0;
  failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteControlResponse::~RemoteControlResponse() {
  SharedDtor();
}

void RemoteControlResponse::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
    delete failurereason_;
  }
  if (this != default_instance_) {
  }
}

void RemoteControlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteControlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteControlResponse_descriptor_;
}

const RemoteControlResponse& RemoteControlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteControlResponse* RemoteControlResponse::default_instance_ = NULL;

RemoteControlResponse* RemoteControlResponse::New() const {
  return new RemoteControlResponse;
}

void RemoteControlResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    remote_control_response_type_ = 0;
    if (has_failurereason()) {
      if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
        failurereason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteControlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_id;
        break;
      }

      // optional string device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remote_control_response_type;
        break;
      }

      // optional .RemoteControlResponseType remote_control_response_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_control_response_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemoteControlResponseType_IsValid(value)) {
            set_remote_control_response_type(static_cast< ::RemoteControlResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_failureReason;
        break;
      }

      // optional string failureReason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failureReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failurereason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failurereason().data(), this->failurereason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteControlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_id(), output);
  }

  // optional .RemoteControlResponseType remote_control_response_type = 3;
  if (has_remote_control_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->remote_control_response_type(), output);
  }

  // optional string failureReason = 4;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->failurereason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteControlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_id(), target);
  }

  // optional .RemoteControlResponseType remote_control_response_type = 3;
  if (has_remote_control_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->remote_control_response_type(), target);
  }

  // optional string failureReason = 4;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failurereason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteControlResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional .RemoteControlResponseType remote_control_response_type = 3;
    if (has_remote_control_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->remote_control_response_type());
    }

    // optional string failureReason = 4;
    if (has_failurereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failurereason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteControlResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteControlResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteControlResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteControlResponse::MergeFrom(const RemoteControlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_remote_control_response_type()) {
      set_remote_control_response_type(from.remote_control_response_type());
    }
    if (from.has_failurereason()) {
      set_failurereason(from.failurereason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteControlResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlResponse::CopyFrom(const RemoteControlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlResponse::IsInitialized() const {

  return true;
}

void RemoteControlResponse::Swap(RemoteControlResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(remote_control_response_type_, other->remote_control_response_type_);
    std::swap(failurereason_, other->failurereason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteControlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteControlResponse_descriptor_;
  metadata.reflection = RemoteControlResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteUpgradeResponse::kRequestIdFieldNumber;
const int RemoteUpgradeResponse::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

RemoteUpgradeResponse::RemoteUpgradeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteUpgradeResponse::InitAsDefaultInstance() {
}

RemoteUpgradeResponse::RemoteUpgradeResponse(const RemoteUpgradeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteUpgradeResponse::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteUpgradeResponse::~RemoteUpgradeResponse() {
  SharedDtor();
}

void RemoteUpgradeResponse::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void RemoteUpgradeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteUpgradeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteUpgradeResponse_descriptor_;
}

const RemoteUpgradeResponse& RemoteUpgradeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageall_2eproto();
  return *default_instance_;
}

RemoteUpgradeResponse* RemoteUpgradeResponse::default_instance_ = NULL;

RemoteUpgradeResponse* RemoteUpgradeResponse::New() const {
  return new RemoteUpgradeResponse;
}

void RemoteUpgradeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteUpgradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_id;
        break;
      }

      // optional string device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteUpgradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteUpgradeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteUpgradeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteUpgradeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteUpgradeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteUpgradeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteUpgradeResponse::MergeFrom(const RemoteUpgradeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteUpgradeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteUpgradeResponse::CopyFrom(const RemoteUpgradeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteUpgradeResponse::IsInitialized() const {

  return true;
}

void RemoteUpgradeResponse::Swap(RemoteUpgradeResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteUpgradeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteUpgradeResponse_descriptor_;
  metadata.reflection = RemoteUpgradeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
