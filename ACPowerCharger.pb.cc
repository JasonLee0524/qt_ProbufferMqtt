// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oss/southbound/ACPowerCharger.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "oss/southbound/ACPowerCharger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace oss {
namespace southbound {

namespace {

const ::google::protobuf::Descriptor* ACPowerCharger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACPowerCharger_BasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_BasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACPowerCharger_RealtimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_RealtimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACPowerCharger_ServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_ServiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACPowerCharger_RemoteOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACPowerCharger_RemoteOperation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACPowerCharger_PowerChargerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_oss_2fsouthbound_2fACPowerCharger_2eproto() {
  protobuf_AddDesc_oss_2fsouthbound_2fACPowerCharger_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "oss/southbound/ACPowerCharger.proto");
  GOOGLE_CHECK(file != NULL);
  ACPowerCharger_descriptor_ = file->message_type(0);
  static const int ACPowerCharger_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, message_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, basicinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, realtime_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, alarms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, service_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, remote_operation_),
  };
  ACPowerCharger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_descriptor_,
      ACPowerCharger::default_instance_,
      ACPowerCharger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger));
  ACPowerCharger_BasicInfo_descriptor_ = ACPowerCharger_descriptor_->nested_type(0);
  static const int ACPowerCharger_BasicInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, common_basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, power_charger_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, charging_connector_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, power_),
  };
  ACPowerCharger_BasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_BasicInfo_descriptor_,
      ACPowerCharger_BasicInfo::default_instance_,
      ACPowerCharger_BasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_BasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger_BasicInfo));
  ACPowerCharger_RealtimeInfo_descriptor_ = ACPowerCharger_descriptor_->nested_type(1);
  static const int ACPowerCharger_RealtimeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, connectivity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, device_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, charging_connector_),
  };
  ACPowerCharger_RealtimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_RealtimeInfo_descriptor_,
      ACPowerCharger_RealtimeInfo::default_instance_,
      ACPowerCharger_RealtimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RealtimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger_RealtimeInfo));
  ACPowerCharger_ServiceInfo_descriptor_ = ACPowerCharger_descriptor_->nested_type(2);
  static const int ACPowerCharger_ServiceInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charging_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charging_start_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charged_power_realtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charging_finish_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charged_power_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charging_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, charging_finish_result_),
  };
  ACPowerCharger_ServiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_ServiceInfo_descriptor_,
      ACPowerCharger_ServiceInfo::default_instance_,
      ACPowerCharger_ServiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_ServiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger_ServiceInfo));
  ACPowerCharger_RemoteOperation_descriptor_ = ACPowerCharger_descriptor_->nested_type(3);
  static const int ACPowerCharger_RemoteOperation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RemoteOperation, charging_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RemoteOperation, remote_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RemoteOperation, remote_upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RemoteOperation, remote_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RemoteOperation, remote_operation_response_),
  };
  ACPowerCharger_RemoteOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACPowerCharger_RemoteOperation_descriptor_,
      ACPowerCharger_RemoteOperation::default_instance_,
      ACPowerCharger_RemoteOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RemoteOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACPowerCharger_RemoteOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACPowerCharger_RemoteOperation));
  ACPowerCharger_PowerChargerType_descriptor_ = ACPowerCharger_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_oss_2fsouthbound_2fACPowerCharger_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_descriptor_, &ACPowerCharger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_BasicInfo_descriptor_, &ACPowerCharger_BasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_RealtimeInfo_descriptor_, &ACPowerCharger_RealtimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_ServiceInfo_descriptor_, &ACPowerCharger_ServiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACPowerCharger_RemoteOperation_descriptor_, &ACPowerCharger_RemoteOperation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_oss_2fsouthbound_2fACPowerCharger_2eproto() {
  delete ACPowerCharger::default_instance_;
  delete ACPowerCharger_reflection_;
  delete ACPowerCharger_BasicInfo::default_instance_;
  delete ACPowerCharger_BasicInfo_reflection_;
  delete ACPowerCharger_RealtimeInfo::default_instance_;
  delete ACPowerCharger_RealtimeInfo_reflection_;
  delete ACPowerCharger_ServiceInfo::default_instance_;
  delete ACPowerCharger_ServiceInfo_reflection_;
  delete ACPowerCharger_RemoteOperation::default_instance_;
  delete ACPowerCharger_RemoteOperation_reflection_;
}

void protobuf_AddDesc_oss_2fsouthbound_2fACPowerCharger_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fCommonBasicInfo_2eproto();
  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fConnectivityState_2eproto();
  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fAlarm_2eproto();
  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fDeviceState_2eproto();
  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fChargingConnector_2eproto();
  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fControlCommandResponse_2eproto();
  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fRemoteUpgrade_2eproto();
  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fRemoteConfiguration_2eproto();
  ::oss::southbound::protobuf_AddDesc_oss_2fsouthbound_2fcommon_2fRemoteControl_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#oss/southbound/ACPowerCharger.proto\022\016o"
    "ss.southbound\032+oss/southbound/common/Com"
    "monBasicInfo.proto\032-oss/southbound/commo"
    "n/ConnectivityState.proto\032!oss/southboun"
    "d/common/Alarm.proto\032\'oss/southbound/com"
    "mon/DeviceState.proto\032-oss/southbound/co"
    "mmon/ChargingConnector.proto\0322oss/southb"
    "ound/common/ControlCommandResponse.proto"
    "\032)oss/southbound/common/RemoteUpgrade.pr"
    "oto\032/oss/southbound/common/RemoteConfigu"
    "ration.proto\032)oss/southbound/common/Remo"
    "teControl.proto\"\222\014\n\016ACPowerCharger\022\021\n\tde"
    "vice_id\030\001 \001(\t\022\031\n\021message_timestamp\030\002 \001(\003"
    "\022;\n\tbasicInfo\030\003 \001(\0132(.oss.southbound.ACP"
    "owerCharger.BasicInfo\022B\n\rrealtime_info\030\004"
    " \001(\0132+.oss.southbound.ACPowerCharger.Rea"
    "ltimeInfo\022%\n\006alarms\030\005 \003(\0132\025.oss.southbou"
    "nd.Alarm\022@\n\014service_info\030\006 \001(\0132*.oss.sou"
    "thbound.ACPowerCharger.ServiceInfo\022H\n\020re"
    "mote_operation\030\007 \001(\0132..oss.southbound.AC"
    "PowerCharger.RemoteOperation\032\310\001\n\tBasicIn"
    "fo\022:\n\021common_basic_info\030\001 \001(\0132\037.oss.sout"
    "hbound.CommonBasicInfo\022K\n\022power_charger_"
    "type\030\002 \001(\0162/.oss.southbound.ACPowerCharg"
    "er.PowerChargerType\022#\n\033charging_connecto"
    "r_quantity\030\003 \001(\005\022\r\n\005power\030\004 \001(\002\032\277\001\n\014Real"
    "timeInfo\022=\n\022connectivity_state\030\001 \001(\0132!.o"
    "ss.southbound.ConnectivityState\0221\n\014devic"
    "e_state\030\002 \001(\0132\033.oss.southbound.DeviceSta"
    "te\022=\n\022charging_connector\030\004 \001(\0132!.oss.sou"
    "thbound.ChargingConnector\032\330\002\n\013ServiceInf"
    "o\0225\n\016charging_event\030\001 \001(\0162\035.oss.southbou"
    "nd.ChargingEvent\022 \n\030charging_start_times"
    "tamp\030\002 \001(\003\022\017\n\007voltage\030\003 \001(\002\022\017\n\007current\030\004"
    " \001(\002\022\r\n\005power\030\005 \001(\002\022\036\n\026charged_power_rea"
    "ltime\030\006 \001(\002\022!\n\031charging_finish_timestamp"
    "\030\007 \001(\003\022\033\n\023charged_power_total\030\010 \001(\002\022\031\n\021c"
    "harging_duration\030\t \001(\005\022D\n\026charging_finis"
    "h_result\030\n \001(\0162$.oss.southbound.Charging"
    "FinishResult\032\307\002\n\017RemoteOperation\0227\n\017char"
    "ging_policy\030\001 \001(\0132\036.oss.southbound.Charg"
    "ingPolicy\0225\n\016remote_control\030\002 \001(\0132\035.oss."
    "southbound.RemoteControl\0225\n\016remote_upgra"
    "de\030\003 \001(\0132\035.oss.southbound.RemoteUpgrade\022"
    "A\n\024remote_configuration\030\004 \001(\0132#.oss.sout"
    "hbound.RemoteConfiguration\022J\n\031remote_ope"
    "ration_response\030\005 \001(\0132\'.oss.southbound.R"
    "emoteOperationResponse\"l\n\020PowerChargerTy"
    "pe\022\017\n\013PCT_AC_ONLY\020\000\022\017\n\013PCT_DC_ONLY\020\001\022\024\n\020"
    "PCT_AC_DC_HYBRID\020\002\022\016\n\tPCT_OTHER\020\376\001\022\020\n\013PC"
    "T_UNKNOWN\020\377\001BC\n,com.nextev.pm.oss.common"
    ".protobuf.southboundB\023ACPowerChargerProt"
    "o", 2081);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "oss/southbound/ACPowerCharger.proto", &protobuf_RegisterTypes);
  ACPowerCharger::default_instance_ = new ACPowerCharger();
  ACPowerCharger_BasicInfo::default_instance_ = new ACPowerCharger_BasicInfo();
  ACPowerCharger_RealtimeInfo::default_instance_ = new ACPowerCharger_RealtimeInfo();
  ACPowerCharger_ServiceInfo::default_instance_ = new ACPowerCharger_ServiceInfo();
  ACPowerCharger_RemoteOperation::default_instance_ = new ACPowerCharger_RemoteOperation();
  ACPowerCharger::default_instance_->InitAsDefaultInstance();
  ACPowerCharger_BasicInfo::default_instance_->InitAsDefaultInstance();
  ACPowerCharger_RealtimeInfo::default_instance_->InitAsDefaultInstance();
  ACPowerCharger_ServiceInfo::default_instance_->InitAsDefaultInstance();
  ACPowerCharger_RemoteOperation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_oss_2fsouthbound_2fACPowerCharger_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_oss_2fsouthbound_2fACPowerCharger_2eproto {
  StaticDescriptorInitializer_oss_2fsouthbound_2fACPowerCharger_2eproto() {
    protobuf_AddDesc_oss_2fsouthbound_2fACPowerCharger_2eproto();
  }
} static_descriptor_initializer_oss_2fsouthbound_2fACPowerCharger_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ACPowerCharger_PowerChargerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_PowerChargerType_descriptor_;
}
bool ACPowerCharger_PowerChargerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_AC_ONLY;
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_DC_ONLY;
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_AC_DC_HYBRID;
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_OTHER;
const ACPowerCharger_PowerChargerType ACPowerCharger::PCT_UNKNOWN;
const ACPowerCharger_PowerChargerType ACPowerCharger::PowerChargerType_MIN;
const ACPowerCharger_PowerChargerType ACPowerCharger::PowerChargerType_MAX;
const int ACPowerCharger::PowerChargerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ACPowerCharger_BasicInfo::kCommonBasicInfoFieldNumber;
const int ACPowerCharger_BasicInfo::kPowerChargerTypeFieldNumber;
const int ACPowerCharger_BasicInfo::kChargingConnectorQuantityFieldNumber;
const int ACPowerCharger_BasicInfo::kPowerFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger_BasicInfo::ACPowerCharger_BasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger_BasicInfo::InitAsDefaultInstance() {
  common_basic_info_ = const_cast< ::oss::southbound::CommonBasicInfo*>(&::oss::southbound::CommonBasicInfo::default_instance());
}

ACPowerCharger_BasicInfo::ACPowerCharger_BasicInfo(const ACPowerCharger_BasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger_BasicInfo::SharedCtor() {
  _cached_size_ = 0;
  common_basic_info_ = NULL;
  power_charger_type_ = 0;
  charging_connector_quantity_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger_BasicInfo::~ACPowerCharger_BasicInfo() {
  SharedDtor();
}

void ACPowerCharger_BasicInfo::SharedDtor() {
  if (this != default_instance_) {
    delete common_basic_info_;
  }
}

void ACPowerCharger_BasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger_BasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_BasicInfo_descriptor_;
}

const ACPowerCharger_BasicInfo& ACPowerCharger_BasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_2fsouthbound_2fACPowerCharger_2eproto();
  return *default_instance_;
}

ACPowerCharger_BasicInfo* ACPowerCharger_BasicInfo::default_instance_ = NULL;

ACPowerCharger_BasicInfo* ACPowerCharger_BasicInfo::New() const {
  return new ACPowerCharger_BasicInfo;
}

void ACPowerCharger_BasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common_basic_info()) {
      if (common_basic_info_ != NULL) common_basic_info_->::oss::southbound::CommonBasicInfo::Clear();
    }
    power_charger_type_ = 0;
    charging_connector_quantity_ = 0;
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger_BasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .oss.southbound.CommonBasicInfo common_basic_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_power_charger_type;
        break;
      }

      // optional .oss.southbound.ACPowerCharger.PowerChargerType power_charger_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_charger_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::oss::southbound::ACPowerCharger_PowerChargerType_IsValid(value)) {
            set_power_charger_type(static_cast< ::oss::southbound::ACPowerCharger_PowerChargerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charging_connector_quantity;
        break;
      }

      // optional int32 charging_connector_quantity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_connector_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charging_connector_quantity_)));
          set_has_charging_connector_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_power;
        break;
      }

      // optional float power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger_BasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .oss.southbound.CommonBasicInfo common_basic_info = 1;
  if (has_common_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common_basic_info(), output);
  }

  // optional .oss.southbound.ACPowerCharger.PowerChargerType power_charger_type = 2;
  if (has_power_charger_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->power_charger_type(), output);
  }

  // optional int32 charging_connector_quantity = 3;
  if (has_charging_connector_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->charging_connector_quantity(), output);
  }

  // optional float power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger_BasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .oss.southbound.CommonBasicInfo common_basic_info = 1;
  if (has_common_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common_basic_info(), target);
  }

  // optional .oss.southbound.ACPowerCharger.PowerChargerType power_charger_type = 2;
  if (has_power_charger_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->power_charger_type(), target);
  }

  // optional int32 charging_connector_quantity = 3;
  if (has_charging_connector_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->charging_connector_quantity(), target);
  }

  // optional float power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger_BasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .oss.southbound.CommonBasicInfo common_basic_info = 1;
    if (has_common_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_basic_info());
    }

    // optional .oss.southbound.ACPowerCharger.PowerChargerType power_charger_type = 2;
    if (has_power_charger_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_charger_type());
    }

    // optional int32 charging_connector_quantity = 3;
    if (has_charging_connector_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charging_connector_quantity());
    }

    // optional float power = 4;
    if (has_power()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger_BasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger_BasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger_BasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger_BasicInfo::MergeFrom(const ACPowerCharger_BasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_basic_info()) {
      mutable_common_basic_info()->::oss::southbound::CommonBasicInfo::MergeFrom(from.common_basic_info());
    }
    if (from.has_power_charger_type()) {
      set_power_charger_type(from.power_charger_type());
    }
    if (from.has_charging_connector_quantity()) {
      set_charging_connector_quantity(from.charging_connector_quantity());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger_BasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger_BasicInfo::CopyFrom(const ACPowerCharger_BasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger_BasicInfo::IsInitialized() const {

  return true;
}

void ACPowerCharger_BasicInfo::Swap(ACPowerCharger_BasicInfo* other) {
  if (other != this) {
    std::swap(common_basic_info_, other->common_basic_info_);
    std::swap(power_charger_type_, other->power_charger_type_);
    std::swap(charging_connector_quantity_, other->charging_connector_quantity_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger_BasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_BasicInfo_descriptor_;
  metadata.reflection = ACPowerCharger_BasicInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACPowerCharger_RealtimeInfo::kConnectivityStateFieldNumber;
const int ACPowerCharger_RealtimeInfo::kDeviceStateFieldNumber;
const int ACPowerCharger_RealtimeInfo::kChargingConnectorFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger_RealtimeInfo::ACPowerCharger_RealtimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger_RealtimeInfo::InitAsDefaultInstance() {
  connectivity_state_ = const_cast< ::oss::southbound::ConnectivityState*>(&::oss::southbound::ConnectivityState::default_instance());
  device_state_ = const_cast< ::oss::southbound::DeviceState*>(&::oss::southbound::DeviceState::default_instance());
  charging_connector_ = const_cast< ::oss::southbound::ChargingConnector*>(&::oss::southbound::ChargingConnector::default_instance());
}

ACPowerCharger_RealtimeInfo::ACPowerCharger_RealtimeInfo(const ACPowerCharger_RealtimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger_RealtimeInfo::SharedCtor() {
  _cached_size_ = 0;
  connectivity_state_ = NULL;
  device_state_ = NULL;
  charging_connector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger_RealtimeInfo::~ACPowerCharger_RealtimeInfo() {
  SharedDtor();
}

void ACPowerCharger_RealtimeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete connectivity_state_;
    delete device_state_;
    delete charging_connector_;
  }
}

void ACPowerCharger_RealtimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger_RealtimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_RealtimeInfo_descriptor_;
}

const ACPowerCharger_RealtimeInfo& ACPowerCharger_RealtimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_2fsouthbound_2fACPowerCharger_2eproto();
  return *default_instance_;
}

ACPowerCharger_RealtimeInfo* ACPowerCharger_RealtimeInfo::default_instance_ = NULL;

ACPowerCharger_RealtimeInfo* ACPowerCharger_RealtimeInfo::New() const {
  return new ACPowerCharger_RealtimeInfo;
}

void ACPowerCharger_RealtimeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_connectivity_state()) {
      if (connectivity_state_ != NULL) connectivity_state_->::oss::southbound::ConnectivityState::Clear();
    }
    if (has_device_state()) {
      if (device_state_ != NULL) device_state_->::oss::southbound::DeviceState::Clear();
    }
    if (has_charging_connector()) {
      if (charging_connector_ != NULL) charging_connector_->::oss::southbound::ChargingConnector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger_RealtimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .oss.southbound.ConnectivityState connectivity_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectivity_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_state;
        break;
      }

      // optional .oss.southbound.DeviceState device_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charging_connector;
        break;
      }

      // optional .oss.southbound.ChargingConnector charging_connector = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charging_connector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charging_connector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger_RealtimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .oss.southbound.ConnectivityState connectivity_state = 1;
  if (has_connectivity_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connectivity_state(), output);
  }

  // optional .oss.southbound.DeviceState device_state = 2;
  if (has_device_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->device_state(), output);
  }

  // optional .oss.southbound.ChargingConnector charging_connector = 4;
  if (has_charging_connector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->charging_connector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger_RealtimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .oss.southbound.ConnectivityState connectivity_state = 1;
  if (has_connectivity_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connectivity_state(), target);
  }

  // optional .oss.southbound.DeviceState device_state = 2;
  if (has_device_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->device_state(), target);
  }

  // optional .oss.southbound.ChargingConnector charging_connector = 4;
  if (has_charging_connector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->charging_connector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger_RealtimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .oss.southbound.ConnectivityState connectivity_state = 1;
    if (has_connectivity_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectivity_state());
    }

    // optional .oss.southbound.DeviceState device_state = 2;
    if (has_device_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_state());
    }

    // optional .oss.southbound.ChargingConnector charging_connector = 4;
    if (has_charging_connector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charging_connector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger_RealtimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger_RealtimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger_RealtimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger_RealtimeInfo::MergeFrom(const ACPowerCharger_RealtimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectivity_state()) {
      mutable_connectivity_state()->::oss::southbound::ConnectivityState::MergeFrom(from.connectivity_state());
    }
    if (from.has_device_state()) {
      mutable_device_state()->::oss::southbound::DeviceState::MergeFrom(from.device_state());
    }
    if (from.has_charging_connector()) {
      mutable_charging_connector()->::oss::southbound::ChargingConnector::MergeFrom(from.charging_connector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger_RealtimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger_RealtimeInfo::CopyFrom(const ACPowerCharger_RealtimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger_RealtimeInfo::IsInitialized() const {

  return true;
}

void ACPowerCharger_RealtimeInfo::Swap(ACPowerCharger_RealtimeInfo* other) {
  if (other != this) {
    std::swap(connectivity_state_, other->connectivity_state_);
    std::swap(device_state_, other->device_state_);
    std::swap(charging_connector_, other->charging_connector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger_RealtimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_RealtimeInfo_descriptor_;
  metadata.reflection = ACPowerCharger_RealtimeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACPowerCharger_ServiceInfo::kChargingEventFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargingStartTimestampFieldNumber;
const int ACPowerCharger_ServiceInfo::kVoltageFieldNumber;
const int ACPowerCharger_ServiceInfo::kCurrentFieldNumber;
const int ACPowerCharger_ServiceInfo::kPowerFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargedPowerRealtimeFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargingFinishTimestampFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargedPowerTotalFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargingDurationFieldNumber;
const int ACPowerCharger_ServiceInfo::kChargingFinishResultFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger_ServiceInfo::ACPowerCharger_ServiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger_ServiceInfo::InitAsDefaultInstance() {
}

ACPowerCharger_ServiceInfo::ACPowerCharger_ServiceInfo(const ACPowerCharger_ServiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger_ServiceInfo::SharedCtor() {
  _cached_size_ = 0;
  charging_event_ = 0;
  charging_start_timestamp_ = GOOGLE_LONGLONG(0);
  voltage_ = 0;
  current_ = 0;
  power_ = 0;
  charged_power_realtime_ = 0;
  charging_finish_timestamp_ = GOOGLE_LONGLONG(0);
  charged_power_total_ = 0;
  charging_duration_ = 0;
  charging_finish_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger_ServiceInfo::~ACPowerCharger_ServiceInfo() {
  SharedDtor();
}

void ACPowerCharger_ServiceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACPowerCharger_ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger_ServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_ServiceInfo_descriptor_;
}

const ACPowerCharger_ServiceInfo& ACPowerCharger_ServiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_2fsouthbound_2fACPowerCharger_2eproto();
  return *default_instance_;
}

ACPowerCharger_ServiceInfo* ACPowerCharger_ServiceInfo::default_instance_ = NULL;

ACPowerCharger_ServiceInfo* ACPowerCharger_ServiceInfo::New() const {
  return new ACPowerCharger_ServiceInfo;
}

void ACPowerCharger_ServiceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charging_event_ = 0;
    charging_start_timestamp_ = GOOGLE_LONGLONG(0);
    voltage_ = 0;
    current_ = 0;
    power_ = 0;
    charged_power_realtime_ = 0;
    charging_finish_timestamp_ = GOOGLE_LONGLONG(0);
    charged_power_total_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    charging_duration_ = 0;
    charging_finish_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger_ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .oss.southbound.ChargingEvent charging_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::oss::southbound::ChargingEvent_IsValid(value)) {
            set_charging_event(static_cast< ::oss::southbound::ChargingEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charging_start_timestamp;
        break;
      }

      // optional int64 charging_start_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_start_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charging_start_timestamp_)));
          set_has_charging_start_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_voltage;
        break;
      }

      // optional float voltage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_current;
        break;
      }

      // optional float current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_power;
        break;
      }

      // optional float power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_charged_power_realtime;
        break;
      }

      // optional float charged_power_realtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_charged_power_realtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charged_power_realtime_)));
          set_has_charged_power_realtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_charging_finish_timestamp;
        break;
      }

      // optional int64 charging_finish_timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_finish_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charging_finish_timestamp_)));
          set_has_charging_finish_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_charged_power_total;
        break;
      }

      // optional float charged_power_total = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_charged_power_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charged_power_total_)));
          set_has_charged_power_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_charging_duration;
        break;
      }

      // optional int32 charging_duration = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charging_duration_)));
          set_has_charging_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_charging_finish_result;
        break;
      }

      // optional .oss.southbound.ChargingFinishResult charging_finish_result = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_finish_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::oss::southbound::ChargingFinishResult_IsValid(value)) {
            set_charging_finish_result(static_cast< ::oss::southbound::ChargingFinishResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger_ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .oss.southbound.ChargingEvent charging_event = 1;
  if (has_charging_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->charging_event(), output);
  }

  // optional int64 charging_start_timestamp = 2;
  if (has_charging_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charging_start_timestamp(), output);
  }

  // optional float voltage = 3;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->voltage(), output);
  }

  // optional float current = 4;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->current(), output);
  }

  // optional float power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->power(), output);
  }

  // optional float charged_power_realtime = 6;
  if (has_charged_power_realtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->charged_power_realtime(), output);
  }

  // optional int64 charging_finish_timestamp = 7;
  if (has_charging_finish_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->charging_finish_timestamp(), output);
  }

  // optional float charged_power_total = 8;
  if (has_charged_power_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->charged_power_total(), output);
  }

  // optional int32 charging_duration = 9;
  if (has_charging_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->charging_duration(), output);
  }

  // optional .oss.southbound.ChargingFinishResult charging_finish_result = 10;
  if (has_charging_finish_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->charging_finish_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger_ServiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .oss.southbound.ChargingEvent charging_event = 1;
  if (has_charging_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->charging_event(), target);
  }

  // optional int64 charging_start_timestamp = 2;
  if (has_charging_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charging_start_timestamp(), target);
  }

  // optional float voltage = 3;
  if (has_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->voltage(), target);
  }

  // optional float current = 4;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->current(), target);
  }

  // optional float power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->power(), target);
  }

  // optional float charged_power_realtime = 6;
  if (has_charged_power_realtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->charged_power_realtime(), target);
  }

  // optional int64 charging_finish_timestamp = 7;
  if (has_charging_finish_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->charging_finish_timestamp(), target);
  }

  // optional float charged_power_total = 8;
  if (has_charged_power_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->charged_power_total(), target);
  }

  // optional int32 charging_duration = 9;
  if (has_charging_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->charging_duration(), target);
  }

  // optional .oss.southbound.ChargingFinishResult charging_finish_result = 10;
  if (has_charging_finish_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->charging_finish_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger_ServiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .oss.southbound.ChargingEvent charging_event = 1;
    if (has_charging_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charging_event());
    }

    // optional int64 charging_start_timestamp = 2;
    if (has_charging_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charging_start_timestamp());
    }

    // optional float voltage = 3;
    if (has_voltage()) {
      total_size += 1 + 4;
    }

    // optional float current = 4;
    if (has_current()) {
      total_size += 1 + 4;
    }

    // optional float power = 5;
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float charged_power_realtime = 6;
    if (has_charged_power_realtime()) {
      total_size += 1 + 4;
    }

    // optional int64 charging_finish_timestamp = 7;
    if (has_charging_finish_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charging_finish_timestamp());
    }

    // optional float charged_power_total = 8;
    if (has_charged_power_total()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 charging_duration = 9;
    if (has_charging_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charging_duration());
    }

    // optional .oss.southbound.ChargingFinishResult charging_finish_result = 10;
    if (has_charging_finish_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charging_finish_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger_ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger_ServiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger_ServiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger_ServiceInfo::MergeFrom(const ACPowerCharger_ServiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charging_event()) {
      set_charging_event(from.charging_event());
    }
    if (from.has_charging_start_timestamp()) {
      set_charging_start_timestamp(from.charging_start_timestamp());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_charged_power_realtime()) {
      set_charged_power_realtime(from.charged_power_realtime());
    }
    if (from.has_charging_finish_timestamp()) {
      set_charging_finish_timestamp(from.charging_finish_timestamp());
    }
    if (from.has_charged_power_total()) {
      set_charged_power_total(from.charged_power_total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_charging_duration()) {
      set_charging_duration(from.charging_duration());
    }
    if (from.has_charging_finish_result()) {
      set_charging_finish_result(from.charging_finish_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger_ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger_ServiceInfo::CopyFrom(const ACPowerCharger_ServiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger_ServiceInfo::IsInitialized() const {

  return true;
}

void ACPowerCharger_ServiceInfo::Swap(ACPowerCharger_ServiceInfo* other) {
  if (other != this) {
    std::swap(charging_event_, other->charging_event_);
    std::swap(charging_start_timestamp_, other->charging_start_timestamp_);
    std::swap(voltage_, other->voltage_);
    std::swap(current_, other->current_);
    std::swap(power_, other->power_);
    std::swap(charged_power_realtime_, other->charged_power_realtime_);
    std::swap(charging_finish_timestamp_, other->charging_finish_timestamp_);
    std::swap(charged_power_total_, other->charged_power_total_);
    std::swap(charging_duration_, other->charging_duration_);
    std::swap(charging_finish_result_, other->charging_finish_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger_ServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_ServiceInfo_descriptor_;
  metadata.reflection = ACPowerCharger_ServiceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACPowerCharger_RemoteOperation::kChargingPolicyFieldNumber;
const int ACPowerCharger_RemoteOperation::kRemoteControlFieldNumber;
const int ACPowerCharger_RemoteOperation::kRemoteUpgradeFieldNumber;
const int ACPowerCharger_RemoteOperation::kRemoteConfigurationFieldNumber;
const int ACPowerCharger_RemoteOperation::kRemoteOperationResponseFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger_RemoteOperation::ACPowerCharger_RemoteOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger_RemoteOperation::InitAsDefaultInstance() {
  charging_policy_ = const_cast< ::oss::southbound::ChargingPolicy*>(&::oss::southbound::ChargingPolicy::default_instance());
  remote_control_ = const_cast< ::oss::southbound::RemoteControl*>(&::oss::southbound::RemoteControl::default_instance());
  remote_upgrade_ = const_cast< ::oss::southbound::RemoteUpgrade*>(&::oss::southbound::RemoteUpgrade::default_instance());
  remote_configuration_ = const_cast< ::oss::southbound::RemoteConfiguration*>(&::oss::southbound::RemoteConfiguration::default_instance());
  remote_operation_response_ = const_cast< ::oss::southbound::RemoteOperationResponse*>(&::oss::southbound::RemoteOperationResponse::default_instance());
}

ACPowerCharger_RemoteOperation::ACPowerCharger_RemoteOperation(const ACPowerCharger_RemoteOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger_RemoteOperation::SharedCtor() {
  _cached_size_ = 0;
  charging_policy_ = NULL;
  remote_control_ = NULL;
  remote_upgrade_ = NULL;
  remote_configuration_ = NULL;
  remote_operation_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger_RemoteOperation::~ACPowerCharger_RemoteOperation() {
  SharedDtor();
}

void ACPowerCharger_RemoteOperation::SharedDtor() {
  if (this != default_instance_) {
    delete charging_policy_;
    delete remote_control_;
    delete remote_upgrade_;
    delete remote_configuration_;
    delete remote_operation_response_;
  }
}

void ACPowerCharger_RemoteOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger_RemoteOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_RemoteOperation_descriptor_;
}

const ACPowerCharger_RemoteOperation& ACPowerCharger_RemoteOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_2fsouthbound_2fACPowerCharger_2eproto();
  return *default_instance_;
}

ACPowerCharger_RemoteOperation* ACPowerCharger_RemoteOperation::default_instance_ = NULL;

ACPowerCharger_RemoteOperation* ACPowerCharger_RemoteOperation::New() const {
  return new ACPowerCharger_RemoteOperation;
}

void ACPowerCharger_RemoteOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charging_policy()) {
      if (charging_policy_ != NULL) charging_policy_->::oss::southbound::ChargingPolicy::Clear();
    }
    if (has_remote_control()) {
      if (remote_control_ != NULL) remote_control_->::oss::southbound::RemoteControl::Clear();
    }
    if (has_remote_upgrade()) {
      if (remote_upgrade_ != NULL) remote_upgrade_->::oss::southbound::RemoteUpgrade::Clear();
    }
    if (has_remote_configuration()) {
      if (remote_configuration_ != NULL) remote_configuration_->::oss::southbound::RemoteConfiguration::Clear();
    }
    if (has_remote_operation_response()) {
      if (remote_operation_response_ != NULL) remote_operation_response_->::oss::southbound::RemoteOperationResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger_RemoteOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .oss.southbound.ChargingPolicy charging_policy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charging_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remote_control;
        break;
      }

      // optional .oss.southbound.RemoteControl remote_control = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remote_upgrade;
        break;
      }

      // optional .oss.southbound.RemoteUpgrade remote_upgrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_upgrade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remote_configuration;
        break;
      }

      // optional .oss.southbound.RemoteConfiguration remote_configuration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_remote_operation_response;
        break;
      }

      // optional .oss.southbound.RemoteOperationResponse remote_operation_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_operation_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_operation_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger_RemoteOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .oss.southbound.ChargingPolicy charging_policy = 1;
  if (has_charging_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charging_policy(), output);
  }

  // optional .oss.southbound.RemoteControl remote_control = 2;
  if (has_remote_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->remote_control(), output);
  }

  // optional .oss.southbound.RemoteUpgrade remote_upgrade = 3;
  if (has_remote_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remote_upgrade(), output);
  }

  // optional .oss.southbound.RemoteConfiguration remote_configuration = 4;
  if (has_remote_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->remote_configuration(), output);
  }

  // optional .oss.southbound.RemoteOperationResponse remote_operation_response = 5;
  if (has_remote_operation_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->remote_operation_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger_RemoteOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .oss.southbound.ChargingPolicy charging_policy = 1;
  if (has_charging_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charging_policy(), target);
  }

  // optional .oss.southbound.RemoteControl remote_control = 2;
  if (has_remote_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->remote_control(), target);
  }

  // optional .oss.southbound.RemoteUpgrade remote_upgrade = 3;
  if (has_remote_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remote_upgrade(), target);
  }

  // optional .oss.southbound.RemoteConfiguration remote_configuration = 4;
  if (has_remote_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->remote_configuration(), target);
  }

  // optional .oss.southbound.RemoteOperationResponse remote_operation_response = 5;
  if (has_remote_operation_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->remote_operation_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger_RemoteOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .oss.southbound.ChargingPolicy charging_policy = 1;
    if (has_charging_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charging_policy());
    }

    // optional .oss.southbound.RemoteControl remote_control = 2;
    if (has_remote_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_control());
    }

    // optional .oss.southbound.RemoteUpgrade remote_upgrade = 3;
    if (has_remote_upgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_upgrade());
    }

    // optional .oss.southbound.RemoteConfiguration remote_configuration = 4;
    if (has_remote_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_configuration());
    }

    // optional .oss.southbound.RemoteOperationResponse remote_operation_response = 5;
    if (has_remote_operation_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_operation_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger_RemoteOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger_RemoteOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger_RemoteOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger_RemoteOperation::MergeFrom(const ACPowerCharger_RemoteOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charging_policy()) {
      mutable_charging_policy()->::oss::southbound::ChargingPolicy::MergeFrom(from.charging_policy());
    }
    if (from.has_remote_control()) {
      mutable_remote_control()->::oss::southbound::RemoteControl::MergeFrom(from.remote_control());
    }
    if (from.has_remote_upgrade()) {
      mutable_remote_upgrade()->::oss::southbound::RemoteUpgrade::MergeFrom(from.remote_upgrade());
    }
    if (from.has_remote_configuration()) {
      mutable_remote_configuration()->::oss::southbound::RemoteConfiguration::MergeFrom(from.remote_configuration());
    }
    if (from.has_remote_operation_response()) {
      mutable_remote_operation_response()->::oss::southbound::RemoteOperationResponse::MergeFrom(from.remote_operation_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger_RemoteOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger_RemoteOperation::CopyFrom(const ACPowerCharger_RemoteOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger_RemoteOperation::IsInitialized() const {

  return true;
}

void ACPowerCharger_RemoteOperation::Swap(ACPowerCharger_RemoteOperation* other) {
  if (other != this) {
    std::swap(charging_policy_, other->charging_policy_);
    std::swap(remote_control_, other->remote_control_);
    std::swap(remote_upgrade_, other->remote_upgrade_);
    std::swap(remote_configuration_, other->remote_configuration_);
    std::swap(remote_operation_response_, other->remote_operation_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger_RemoteOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_RemoteOperation_descriptor_;
  metadata.reflection = ACPowerCharger_RemoteOperation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACPowerCharger::kDeviceIdFieldNumber;
const int ACPowerCharger::kMessageTimestampFieldNumber;
const int ACPowerCharger::kBasicInfoFieldNumber;
const int ACPowerCharger::kRealtimeInfoFieldNumber;
const int ACPowerCharger::kAlarmsFieldNumber;
const int ACPowerCharger::kServiceInfoFieldNumber;
const int ACPowerCharger::kRemoteOperationFieldNumber;
#endif  // !_MSC_VER

ACPowerCharger::ACPowerCharger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACPowerCharger::InitAsDefaultInstance() {
  basicinfo_ = const_cast< ::oss::southbound::ACPowerCharger_BasicInfo*>(&::oss::southbound::ACPowerCharger_BasicInfo::default_instance());
  realtime_info_ = const_cast< ::oss::southbound::ACPowerCharger_RealtimeInfo*>(&::oss::southbound::ACPowerCharger_RealtimeInfo::default_instance());
  service_info_ = const_cast< ::oss::southbound::ACPowerCharger_ServiceInfo*>(&::oss::southbound::ACPowerCharger_ServiceInfo::default_instance());
  remote_operation_ = const_cast< ::oss::southbound::ACPowerCharger_RemoteOperation*>(&::oss::southbound::ACPowerCharger_RemoteOperation::default_instance());
}

ACPowerCharger::ACPowerCharger(const ACPowerCharger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACPowerCharger::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_timestamp_ = GOOGLE_LONGLONG(0);
  basicinfo_ = NULL;
  realtime_info_ = NULL;
  service_info_ = NULL;
  remote_operation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACPowerCharger::~ACPowerCharger() {
  SharedDtor();
}

void ACPowerCharger::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
    delete basicinfo_;
    delete realtime_info_;
    delete service_info_;
    delete remote_operation_;
  }
}

void ACPowerCharger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACPowerCharger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACPowerCharger_descriptor_;
}

const ACPowerCharger& ACPowerCharger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_2fsouthbound_2fACPowerCharger_2eproto();
  return *default_instance_;
}

ACPowerCharger* ACPowerCharger::default_instance_ = NULL;

ACPowerCharger* ACPowerCharger::New() const {
  return new ACPowerCharger;
}

void ACPowerCharger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    message_timestamp_ = GOOGLE_LONGLONG(0);
    if (has_basicinfo()) {
      if (basicinfo_ != NULL) basicinfo_->::oss::southbound::ACPowerCharger_BasicInfo::Clear();
    }
    if (has_realtime_info()) {
      if (realtime_info_ != NULL) realtime_info_->::oss::southbound::ACPowerCharger_RealtimeInfo::Clear();
    }
    if (has_service_info()) {
      if (service_info_ != NULL) service_info_->::oss::southbound::ACPowerCharger_ServiceInfo::Clear();
    }
    if (has_remote_operation()) {
      if (remote_operation_ != NULL) remote_operation_->::oss::southbound::ACPowerCharger_RemoteOperation::Clear();
    }
  }
  alarms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACPowerCharger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_message_timestamp;
        break;
      }

      // optional int64 message_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_timestamp_)));
          set_has_message_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_basicInfo;
        break;
      }

      // optional .oss.southbound.ACPowerCharger.BasicInfo basicInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basicInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basicinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_realtime_info;
        break;
      }

      // optional .oss.southbound.ACPowerCharger.RealtimeInfo realtime_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realtime_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realtime_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alarms;
        break;
      }

      // repeated .oss.southbound.Alarm alarms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alarms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alarms;
        if (input->ExpectTag(50)) goto parse_service_info;
        break;
      }

      // optional .oss.southbound.ACPowerCharger.ServiceInfo service_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_remote_operation;
        break;
      }

      // optional .oss.southbound.ACPowerCharger.RemoteOperation remote_operation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_operation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACPowerCharger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional int64 message_timestamp = 2;
  if (has_message_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->message_timestamp(), output);
  }

  // optional .oss.southbound.ACPowerCharger.BasicInfo basicInfo = 3;
  if (has_basicinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basicinfo(), output);
  }

  // optional .oss.southbound.ACPowerCharger.RealtimeInfo realtime_info = 4;
  if (has_realtime_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->realtime_info(), output);
  }

  // repeated .oss.southbound.Alarm alarms = 5;
  for (int i = 0; i < this->alarms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->alarms(i), output);
  }

  // optional .oss.southbound.ACPowerCharger.ServiceInfo service_info = 6;
  if (has_service_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->service_info(), output);
  }

  // optional .oss.southbound.ACPowerCharger.RemoteOperation remote_operation = 7;
  if (has_remote_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->remote_operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACPowerCharger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional int64 message_timestamp = 2;
  if (has_message_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->message_timestamp(), target);
  }

  // optional .oss.southbound.ACPowerCharger.BasicInfo basicInfo = 3;
  if (has_basicinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basicinfo(), target);
  }

  // optional .oss.southbound.ACPowerCharger.RealtimeInfo realtime_info = 4;
  if (has_realtime_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->realtime_info(), target);
  }

  // repeated .oss.southbound.Alarm alarms = 5;
  for (int i = 0; i < this->alarms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->alarms(i), target);
  }

  // optional .oss.southbound.ACPowerCharger.ServiceInfo service_info = 6;
  if (has_service_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->service_info(), target);
  }

  // optional .oss.southbound.ACPowerCharger.RemoteOperation remote_operation = 7;
  if (has_remote_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->remote_operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACPowerCharger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int64 message_timestamp = 2;
    if (has_message_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->message_timestamp());
    }

    // optional .oss.southbound.ACPowerCharger.BasicInfo basicInfo = 3;
    if (has_basicinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basicinfo());
    }

    // optional .oss.southbound.ACPowerCharger.RealtimeInfo realtime_info = 4;
    if (has_realtime_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->realtime_info());
    }

    // optional .oss.southbound.ACPowerCharger.ServiceInfo service_info = 6;
    if (has_service_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service_info());
    }

    // optional .oss.southbound.ACPowerCharger.RemoteOperation remote_operation = 7;
    if (has_remote_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_operation());
    }

  }
  // repeated .oss.southbound.Alarm alarms = 5;
  total_size += 1 * this->alarms_size();
  for (int i = 0; i < this->alarms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alarms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACPowerCharger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACPowerCharger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACPowerCharger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACPowerCharger::MergeFrom(const ACPowerCharger& from) {
  GOOGLE_CHECK_NE(&from, this);
  alarms_.MergeFrom(from.alarms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_message_timestamp()) {
      set_message_timestamp(from.message_timestamp());
    }
    if (from.has_basicinfo()) {
      mutable_basicinfo()->::oss::southbound::ACPowerCharger_BasicInfo::MergeFrom(from.basicinfo());
    }
    if (from.has_realtime_info()) {
      mutable_realtime_info()->::oss::southbound::ACPowerCharger_RealtimeInfo::MergeFrom(from.realtime_info());
    }
    if (from.has_service_info()) {
      mutable_service_info()->::oss::southbound::ACPowerCharger_ServiceInfo::MergeFrom(from.service_info());
    }
    if (from.has_remote_operation()) {
      mutable_remote_operation()->::oss::southbound::ACPowerCharger_RemoteOperation::MergeFrom(from.remote_operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACPowerCharger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACPowerCharger::CopyFrom(const ACPowerCharger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACPowerCharger::IsInitialized() const {

  return true;
}

void ACPowerCharger::Swap(ACPowerCharger* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(message_timestamp_, other->message_timestamp_);
    std::swap(basicinfo_, other->basicinfo_);
    std::swap(realtime_info_, other->realtime_info_);
    alarms_.Swap(&other->alarms_);
    std::swap(service_info_, other->service_info_);
    std::swap(remote_operation_, other->remote_operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACPowerCharger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACPowerCharger_descriptor_;
  metadata.reflection = ACPowerCharger_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace southbound
}  // namespace oss

// @@protoc_insertion_point(global_scope)
